syntax = "proto3";

package pb;

option go_package = "internal/metadata/pb";

import "google/api/annotations.proto";
import "dtos/detection_point.proto";
import "dtos/file.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
};


service DetectionPointService {
  rpc ListDetectionPoints(ListDetectionPointsRequest) returns (ListDetectionPointsResponse) {
    option (google.api.http) = {
      get: "/api/v1/datasource/{datasource_name}/detection_points"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }

  rpc GetDetectionPoint(GetDetectionPointRequest) returns (DetectionPoint) {
    option (google.api.http) = {
      get: "/api/v1/datasource/{datasource_name}/detection_points/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }
  


  rpc CreateDetectionPoints(CreateDetectionPointRequest) returns (pb.DetectionPoint) {
    option (google.api.http) = {
      post: "/api/v1/datasource/{datasource_name}/detection_points"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }

  rpc CreateManyDetectionPoints(CreateManyDetectionPointRequest) returns (pb.CreateManyDetectionPointsResponse) {
    option (google.api.http) = {
      post: "/api/v1/datasource/{datasource_name}/many_detection_points"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }

  rpc UpdateDetectionPoint(UpdateDetectionPointRequest) returns (pb.DetectionPoint) {
    option (google.api.http) = {
      put: "/api/v1/datasource/{datasource_name}/detection_points"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }

  rpc DeleteDetectionPoint(DeleteDetectionPointRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/datasource/{datasource_name}/detection_points/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }

  rpc DeleteAllDetectionPoint(DeleteDetectionPointRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/datasource/{datasource_name}/detection_points"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }

  rpc BulkCreateDetectionPoints(BulkDetectionPointRequest) returns (BulkDetectionPointResponse) {
    option (google.api.http) = {
      post: "/api/v1/datasource/{datasource_name}/detection_points/bulk"
      body: "*"
    };    
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {      
      consumes: ["multipart/form-data"];
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }
  
}
message CreateDetectionPointRequest {
  string datasource_name = 1;
  pb.DetectionPoint detection_point = 2;
}

message CreateManyDetectionPointRequest {
  string datasource_name = 1;
  repeated pb.DetectionPoint detection_point = 2;
}
// Response indicating the status of the operation
message CreateManyDetectionPointsResponse {
  bool success = 1;  // Indicates if the operation was successful
  string message = 2;  // Additional information about the operation
  repeated pb.DetectionPoint detection_points = 3;  // List of detection points created
}

message UpdateDetectionPointRequest {
  string datasource_name = 1;
  pb.DetectionPoint detection_point = 2;
}

message DeleteDetectionPointRequest {
  string datasource_name = 1;
  string id = 2;
}

message GetDetectionPointRequest {
  string datasource_name = 1;
  string id = 2;
}

message ListDetectionPointsRequest {
  string datasource_name = 1;
}

message ListDetectionPointsResponse {
  string datasource_name = 1;
  repeated DetectionPoint detection_points = 2;
}

message BulkDetectionPointRequest {
  string datasource_name = 1;
  File file = 2; // File containing detection points in JSON format
}

message BulkDetectionPointResponse {
  repeated DetectionPoint detection_points = 1; // List of detection points created
}


