syntax = "proto3";

package pb;

option go_package = "internal/metadata/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "dtos/dashboard.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
};

service DashboardService {
  rpc List(DashboardListParams) returns (DashboardListResponse) {
    option (google.api.http) = {
      get: "/api/v1/dashboard"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }
  
  rpc Get(DashboardGetRequest) returns (pb.Dashboard) {
    option (google.api.http) = {
      get: "/api/v1/dashboard/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer"
        }
      }
    };
  }
  
  rpc Create(pb.Dashboard) returns (pb.Dashboard) {
    option (google.api.http) = {
      post: "/api/v1/dashboard"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer"
        }
      }
    };
  }
  
  rpc Update(pb.Dashboard) returns (pb.Dashboard) {
    option (google.api.http) = {
      put: "/api/v1/dashboard"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer"
        }
      }
    };
  }
  
  rpc Delete(DashboardDeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/dashboard/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer"
        }
      }
    };
  }
}


message DashboardGetRequest {
  string id = 1;
}

message DashboardDeleteRequest {
  string id = 1;
}

message DashboardListParams {
  string data_source_name = 1;
}

message DashboardListResponse {
  repeated pb.Dashboard dashboard = 1;
}

