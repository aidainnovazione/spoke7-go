// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: services/detection_section.service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DetectionSectionService_ListDetectionSections_FullMethodName       = "/pb.DetectionSectionService/ListDetectionSections"
	DetectionSectionService_GetDetectionSection_FullMethodName         = "/pb.DetectionSectionService/GetDetectionSection"
	DetectionSectionService_CreateDetectionSection_FullMethodName      = "/pb.DetectionSectionService/CreateDetectionSection"
	DetectionSectionService_UpdateDetectionSection_FullMethodName      = "/pb.DetectionSectionService/UpdateDetectionSection"
	DetectionSectionService_DeleteDetectionSection_FullMethodName      = "/pb.DetectionSectionService/DeleteDetectionSection"
	DetectionSectionService_BulkCreateDetectionSections_FullMethodName = "/pb.DetectionSectionService/BulkCreateDetectionSections"
)

// DetectionSectionServiceClient is the client API for DetectionSectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetectionSectionServiceClient interface {
	ListDetectionSections(ctx context.Context, in *ListDetectionSectionsRequest, opts ...grpc.CallOption) (*ListDetectionSectionsResponse, error)
	GetDetectionSection(ctx context.Context, in *GetDetectionSectionRequest, opts ...grpc.CallOption) (*DetectionSection, error)
	CreateDetectionSection(ctx context.Context, in *CreateDetectionSectionRequest, opts ...grpc.CallOption) (*DetectionSection, error)
	UpdateDetectionSection(ctx context.Context, in *UpdateDetectionSectionRequest, opts ...grpc.CallOption) (*DetectionSection, error)
	DeleteDetectionSection(ctx context.Context, in *DeleteDetectionSectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkCreateDetectionSections(ctx context.Context, in *BulkDetectionSectionRequest, opts ...grpc.CallOption) (*BulkDetectionSectionResponse, error)
}

type detectionSectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectionSectionServiceClient(cc grpc.ClientConnInterface) DetectionSectionServiceClient {
	return &detectionSectionServiceClient{cc}
}

func (c *detectionSectionServiceClient) ListDetectionSections(ctx context.Context, in *ListDetectionSectionsRequest, opts ...grpc.CallOption) (*ListDetectionSectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDetectionSectionsResponse)
	err := c.cc.Invoke(ctx, DetectionSectionService_ListDetectionSections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionSectionServiceClient) GetDetectionSection(ctx context.Context, in *GetDetectionSectionRequest, opts ...grpc.CallOption) (*DetectionSection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectionSection)
	err := c.cc.Invoke(ctx, DetectionSectionService_GetDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionSectionServiceClient) CreateDetectionSection(ctx context.Context, in *CreateDetectionSectionRequest, opts ...grpc.CallOption) (*DetectionSection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectionSection)
	err := c.cc.Invoke(ctx, DetectionSectionService_CreateDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionSectionServiceClient) UpdateDetectionSection(ctx context.Context, in *UpdateDetectionSectionRequest, opts ...grpc.CallOption) (*DetectionSection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectionSection)
	err := c.cc.Invoke(ctx, DetectionSectionService_UpdateDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionSectionServiceClient) DeleteDetectionSection(ctx context.Context, in *DeleteDetectionSectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DetectionSectionService_DeleteDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionSectionServiceClient) BulkCreateDetectionSections(ctx context.Context, in *BulkDetectionSectionRequest, opts ...grpc.CallOption) (*BulkDetectionSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkDetectionSectionResponse)
	err := c.cc.Invoke(ctx, DetectionSectionService_BulkCreateDetectionSections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetectionSectionServiceServer is the server API for DetectionSectionService service.
// All implementations must embed UnimplementedDetectionSectionServiceServer
// for forward compatibility.
type DetectionSectionServiceServer interface {
	ListDetectionSections(context.Context, *ListDetectionSectionsRequest) (*ListDetectionSectionsResponse, error)
	GetDetectionSection(context.Context, *GetDetectionSectionRequest) (*DetectionSection, error)
	CreateDetectionSection(context.Context, *CreateDetectionSectionRequest) (*DetectionSection, error)
	UpdateDetectionSection(context.Context, *UpdateDetectionSectionRequest) (*DetectionSection, error)
	DeleteDetectionSection(context.Context, *DeleteDetectionSectionRequest) (*emptypb.Empty, error)
	BulkCreateDetectionSections(context.Context, *BulkDetectionSectionRequest) (*BulkDetectionSectionResponse, error)
	mustEmbedUnimplementedDetectionSectionServiceServer()
}

// UnimplementedDetectionSectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDetectionSectionServiceServer struct{}

func (UnimplementedDetectionSectionServiceServer) ListDetectionSections(context.Context, *ListDetectionSectionsRequest) (*ListDetectionSectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDetectionSections not implemented")
}
func (UnimplementedDetectionSectionServiceServer) GetDetectionSection(context.Context, *GetDetectionSectionRequest) (*DetectionSection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetectionSection not implemented")
}
func (UnimplementedDetectionSectionServiceServer) CreateDetectionSection(context.Context, *CreateDetectionSectionRequest) (*DetectionSection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDetectionSection not implemented")
}
func (UnimplementedDetectionSectionServiceServer) UpdateDetectionSection(context.Context, *UpdateDetectionSectionRequest) (*DetectionSection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDetectionSection not implemented")
}
func (UnimplementedDetectionSectionServiceServer) DeleteDetectionSection(context.Context, *DeleteDetectionSectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDetectionSection not implemented")
}
func (UnimplementedDetectionSectionServiceServer) BulkCreateDetectionSections(context.Context, *BulkDetectionSectionRequest) (*BulkDetectionSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateDetectionSections not implemented")
}
func (UnimplementedDetectionSectionServiceServer) mustEmbedUnimplementedDetectionSectionServiceServer() {
}
func (UnimplementedDetectionSectionServiceServer) testEmbeddedByValue() {}

// UnsafeDetectionSectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetectionSectionServiceServer will
// result in compilation errors.
type UnsafeDetectionSectionServiceServer interface {
	mustEmbedUnimplementedDetectionSectionServiceServer()
}

func RegisterDetectionSectionServiceServer(s grpc.ServiceRegistrar, srv DetectionSectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedDetectionSectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DetectionSectionService_ServiceDesc, srv)
}

func _DetectionSectionService_ListDetectionSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetectionSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionSectionServiceServer).ListDetectionSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionSectionService_ListDetectionSections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionSectionServiceServer).ListDetectionSections(ctx, req.(*ListDetectionSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionSectionService_GetDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionSectionServiceServer).GetDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionSectionService_GetDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionSectionServiceServer).GetDetectionSection(ctx, req.(*GetDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionSectionService_CreateDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionSectionServiceServer).CreateDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionSectionService_CreateDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionSectionServiceServer).CreateDetectionSection(ctx, req.(*CreateDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionSectionService_UpdateDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionSectionServiceServer).UpdateDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionSectionService_UpdateDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionSectionServiceServer).UpdateDetectionSection(ctx, req.(*UpdateDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionSectionService_DeleteDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionSectionServiceServer).DeleteDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionSectionService_DeleteDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionSectionServiceServer).DeleteDetectionSection(ctx, req.(*DeleteDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionSectionService_BulkCreateDetectionSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionSectionServiceServer).BulkCreateDetectionSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionSectionService_BulkCreateDetectionSections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionSectionServiceServer).BulkCreateDetectionSections(ctx, req.(*BulkDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DetectionSectionService_ServiceDesc is the grpc.ServiceDesc for DetectionSectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetectionSectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DetectionSectionService",
	HandlerType: (*DetectionSectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDetectionSections",
			Handler:    _DetectionSectionService_ListDetectionSections_Handler,
		},
		{
			MethodName: "GetDetectionSection",
			Handler:    _DetectionSectionService_GetDetectionSection_Handler,
		},
		{
			MethodName: "CreateDetectionSection",
			Handler:    _DetectionSectionService_CreateDetectionSection_Handler,
		},
		{
			MethodName: "UpdateDetectionSection",
			Handler:    _DetectionSectionService_UpdateDetectionSection_Handler,
		},
		{
			MethodName: "DeleteDetectionSection",
			Handler:    _DetectionSectionService_DeleteDetectionSection_Handler,
		},
		{
			MethodName: "BulkCreateDetectionSections",
			Handler:    _DetectionSectionService_BulkCreateDetectionSections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/detection_section.service.proto",
}
