// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: services/road_network.service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoadNetworkService_ListRoadNetworks_FullMethodName          = "/pb.RoadNetworkService/ListRoadNetworks"
	RoadNetworkService_GetRoadNetwork_FullMethodName            = "/pb.RoadNetworkService/GetRoadNetwork"
	RoadNetworkService_GetRoadNetworkGeoJSON_FullMethodName     = "/pb.RoadNetworkService/GetRoadNetworkGeoJSON"
	RoadNetworkService_CreateRoadNetwork_FullMethodName         = "/pb.RoadNetworkService/CreateRoadNetwork"
	RoadNetworkService_UpdateRoadNetwork_FullMethodName         = "/pb.RoadNetworkService/UpdateRoadNetwork"
	RoadNetworkService_UpdateRoadNetworkByImport_FullMethodName = "/pb.RoadNetworkService/UpdateRoadNetworkByImport"
	RoadNetworkService_DeleteRoadNetwork_FullMethodName         = "/pb.RoadNetworkService/DeleteRoadNetwork"
	RoadNetworkService_UploadRoadNetwork_FullMethodName         = "/pb.RoadNetworkService/UploadRoadNetwork"
)

// RoadNetworkServiceClient is the client API for RoadNetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoadNetworkServiceClient interface {
	ListRoadNetworks(ctx context.Context, in *RoadNetworkListParams, opts ...grpc.CallOption) (*RoadNetworkListResponse, error)
	GetRoadNetwork(ctx context.Context, in *RoadNetworkGetRequest, opts ...grpc.CallOption) (*RoadNetwork, error)
	GetRoadNetworkGeoJSON(ctx context.Context, in *RoadNetworkGetRequest, opts ...grpc.CallOption) (*structpb.Struct, error)
	CreateRoadNetwork(ctx context.Context, in *RoadNetworkCreateRequest, opts ...grpc.CallOption) (*RoadNetwork, error)
	UpdateRoadNetwork(ctx context.Context, in *RoadNetworkUpdateRequest, opts ...grpc.CallOption) (*RoadNetwork, error)
	UpdateRoadNetworkByImport(ctx context.Context, in *RoadNetworkUpdateByImportRequest, opts ...grpc.CallOption) (*RoadNetwork, error)
	DeleteRoadNetwork(ctx context.Context, in *RoadNetworkDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UploadRoadNetwork(ctx context.Context, in *RoadNetworkFile, opts ...grpc.CallOption) (*RoadNetwork, error)
}

type roadNetworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoadNetworkServiceClient(cc grpc.ClientConnInterface) RoadNetworkServiceClient {
	return &roadNetworkServiceClient{cc}
}

func (c *roadNetworkServiceClient) ListRoadNetworks(ctx context.Context, in *RoadNetworkListParams, opts ...grpc.CallOption) (*RoadNetworkListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoadNetworkListResponse)
	err := c.cc.Invoke(ctx, RoadNetworkService_ListRoadNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadNetworkServiceClient) GetRoadNetwork(ctx context.Context, in *RoadNetworkGetRequest, opts ...grpc.CallOption) (*RoadNetwork, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoadNetwork)
	err := c.cc.Invoke(ctx, RoadNetworkService_GetRoadNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadNetworkServiceClient) GetRoadNetworkGeoJSON(ctx context.Context, in *RoadNetworkGetRequest, opts ...grpc.CallOption) (*structpb.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, RoadNetworkService_GetRoadNetworkGeoJSON_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadNetworkServiceClient) CreateRoadNetwork(ctx context.Context, in *RoadNetworkCreateRequest, opts ...grpc.CallOption) (*RoadNetwork, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoadNetwork)
	err := c.cc.Invoke(ctx, RoadNetworkService_CreateRoadNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadNetworkServiceClient) UpdateRoadNetwork(ctx context.Context, in *RoadNetworkUpdateRequest, opts ...grpc.CallOption) (*RoadNetwork, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoadNetwork)
	err := c.cc.Invoke(ctx, RoadNetworkService_UpdateRoadNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadNetworkServiceClient) UpdateRoadNetworkByImport(ctx context.Context, in *RoadNetworkUpdateByImportRequest, opts ...grpc.CallOption) (*RoadNetwork, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoadNetwork)
	err := c.cc.Invoke(ctx, RoadNetworkService_UpdateRoadNetworkByImport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadNetworkServiceClient) DeleteRoadNetwork(ctx context.Context, in *RoadNetworkDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoadNetworkService_DeleteRoadNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadNetworkServiceClient) UploadRoadNetwork(ctx context.Context, in *RoadNetworkFile, opts ...grpc.CallOption) (*RoadNetwork, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoadNetwork)
	err := c.cc.Invoke(ctx, RoadNetworkService_UploadRoadNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoadNetworkServiceServer is the server API for RoadNetworkService service.
// All implementations must embed UnimplementedRoadNetworkServiceServer
// for forward compatibility.
type RoadNetworkServiceServer interface {
	ListRoadNetworks(context.Context, *RoadNetworkListParams) (*RoadNetworkListResponse, error)
	GetRoadNetwork(context.Context, *RoadNetworkGetRequest) (*RoadNetwork, error)
	GetRoadNetworkGeoJSON(context.Context, *RoadNetworkGetRequest) (*structpb.Struct, error)
	CreateRoadNetwork(context.Context, *RoadNetworkCreateRequest) (*RoadNetwork, error)
	UpdateRoadNetwork(context.Context, *RoadNetworkUpdateRequest) (*RoadNetwork, error)
	UpdateRoadNetworkByImport(context.Context, *RoadNetworkUpdateByImportRequest) (*RoadNetwork, error)
	DeleteRoadNetwork(context.Context, *RoadNetworkDeleteRequest) (*emptypb.Empty, error)
	UploadRoadNetwork(context.Context, *RoadNetworkFile) (*RoadNetwork, error)
	mustEmbedUnimplementedRoadNetworkServiceServer()
}

// UnimplementedRoadNetworkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoadNetworkServiceServer struct{}

func (UnimplementedRoadNetworkServiceServer) ListRoadNetworks(context.Context, *RoadNetworkListParams) (*RoadNetworkListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoadNetworks not implemented")
}
func (UnimplementedRoadNetworkServiceServer) GetRoadNetwork(context.Context, *RoadNetworkGetRequest) (*RoadNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoadNetwork not implemented")
}
func (UnimplementedRoadNetworkServiceServer) GetRoadNetworkGeoJSON(context.Context, *RoadNetworkGetRequest) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoadNetworkGeoJSON not implemented")
}
func (UnimplementedRoadNetworkServiceServer) CreateRoadNetwork(context.Context, *RoadNetworkCreateRequest) (*RoadNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoadNetwork not implemented")
}
func (UnimplementedRoadNetworkServiceServer) UpdateRoadNetwork(context.Context, *RoadNetworkUpdateRequest) (*RoadNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoadNetwork not implemented")
}
func (UnimplementedRoadNetworkServiceServer) UpdateRoadNetworkByImport(context.Context, *RoadNetworkUpdateByImportRequest) (*RoadNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoadNetworkByImport not implemented")
}
func (UnimplementedRoadNetworkServiceServer) DeleteRoadNetwork(context.Context, *RoadNetworkDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoadNetwork not implemented")
}
func (UnimplementedRoadNetworkServiceServer) UploadRoadNetwork(context.Context, *RoadNetworkFile) (*RoadNetwork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadRoadNetwork not implemented")
}
func (UnimplementedRoadNetworkServiceServer) mustEmbedUnimplementedRoadNetworkServiceServer() {}
func (UnimplementedRoadNetworkServiceServer) testEmbeddedByValue()                            {}

// UnsafeRoadNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoadNetworkServiceServer will
// result in compilation errors.
type UnsafeRoadNetworkServiceServer interface {
	mustEmbedUnimplementedRoadNetworkServiceServer()
}

func RegisterRoadNetworkServiceServer(s grpc.ServiceRegistrar, srv RoadNetworkServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoadNetworkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoadNetworkService_ServiceDesc, srv)
}

func _RoadNetworkService_ListRoadNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadNetworkListParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadNetworkServiceServer).ListRoadNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadNetworkService_ListRoadNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadNetworkServiceServer).ListRoadNetworks(ctx, req.(*RoadNetworkListParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadNetworkService_GetRoadNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadNetworkGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadNetworkServiceServer).GetRoadNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadNetworkService_GetRoadNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadNetworkServiceServer).GetRoadNetwork(ctx, req.(*RoadNetworkGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadNetworkService_GetRoadNetworkGeoJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadNetworkGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadNetworkServiceServer).GetRoadNetworkGeoJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadNetworkService_GetRoadNetworkGeoJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadNetworkServiceServer).GetRoadNetworkGeoJSON(ctx, req.(*RoadNetworkGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadNetworkService_CreateRoadNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadNetworkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadNetworkServiceServer).CreateRoadNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadNetworkService_CreateRoadNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadNetworkServiceServer).CreateRoadNetwork(ctx, req.(*RoadNetworkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadNetworkService_UpdateRoadNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadNetworkUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadNetworkServiceServer).UpdateRoadNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadNetworkService_UpdateRoadNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadNetworkServiceServer).UpdateRoadNetwork(ctx, req.(*RoadNetworkUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadNetworkService_UpdateRoadNetworkByImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadNetworkUpdateByImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadNetworkServiceServer).UpdateRoadNetworkByImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadNetworkService_UpdateRoadNetworkByImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadNetworkServiceServer).UpdateRoadNetworkByImport(ctx, req.(*RoadNetworkUpdateByImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadNetworkService_DeleteRoadNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadNetworkDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadNetworkServiceServer).DeleteRoadNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadNetworkService_DeleteRoadNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadNetworkServiceServer).DeleteRoadNetwork(ctx, req.(*RoadNetworkDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadNetworkService_UploadRoadNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoadNetworkFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadNetworkServiceServer).UploadRoadNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoadNetworkService_UploadRoadNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadNetworkServiceServer).UploadRoadNetwork(ctx, req.(*RoadNetworkFile))
	}
	return interceptor(ctx, in, info, handler)
}

// RoadNetworkService_ServiceDesc is the grpc.ServiceDesc for RoadNetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoadNetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RoadNetworkService",
	HandlerType: (*RoadNetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoadNetworks",
			Handler:    _RoadNetworkService_ListRoadNetworks_Handler,
		},
		{
			MethodName: "GetRoadNetwork",
			Handler:    _RoadNetworkService_GetRoadNetwork_Handler,
		},
		{
			MethodName: "GetRoadNetworkGeoJSON",
			Handler:    _RoadNetworkService_GetRoadNetworkGeoJSON_Handler,
		},
		{
			MethodName: "CreateRoadNetwork",
			Handler:    _RoadNetworkService_CreateRoadNetwork_Handler,
		},
		{
			MethodName: "UpdateRoadNetwork",
			Handler:    _RoadNetworkService_UpdateRoadNetwork_Handler,
		},
		{
			MethodName: "UpdateRoadNetworkByImport",
			Handler:    _RoadNetworkService_UpdateRoadNetworkByImport_Handler,
		},
		{
			MethodName: "DeleteRoadNetwork",
			Handler:    _RoadNetworkService_DeleteRoadNetwork_Handler,
		},
		{
			MethodName: "UploadRoadNetwork",
			Handler:    _RoadNetworkService_UploadRoadNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/road_network.service.proto",
}
