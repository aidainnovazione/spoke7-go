// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: services/data_source.service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataSourceService_List_FullMethodName   = "/pb.DataSourceService/List"
	DataSourceService_Get_FullMethodName    = "/pb.DataSourceService/Get"
	DataSourceService_Create_FullMethodName = "/pb.DataSourceService/Create"
	DataSourceService_Update_FullMethodName = "/pb.DataSourceService/Update"
	DataSourceService_Delete_FullMethodName = "/pb.DataSourceService/Delete"
)

// DataSourceServiceClient is the client API for DataSourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSourceServiceClient interface {
	List(ctx context.Context, in *DataSourceListParams, opts ...grpc.CallOption) (*DataSourceListResponse, error)
	Get(ctx context.Context, in *DataSourceGetRequest, opts ...grpc.CallOption) (*DataSource, error)
	Create(ctx context.Context, in *DataSource, opts ...grpc.CallOption) (*DataSource, error)
	Update(ctx context.Context, in *UpdateDataSource, opts ...grpc.CallOption) (*DataSource, error)
	Delete(ctx context.Context, in *DataSourceDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dataSourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSourceServiceClient(cc grpc.ClientConnInterface) DataSourceServiceClient {
	return &dataSourceServiceClient{cc}
}

func (c *dataSourceServiceClient) List(ctx context.Context, in *DataSourceListParams, opts ...grpc.CallOption) (*DataSourceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataSourceListResponse)
	err := c.cc.Invoke(ctx, DataSourceService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceServiceClient) Get(ctx context.Context, in *DataSourceGetRequest, opts ...grpc.CallOption) (*DataSource, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataSource)
	err := c.cc.Invoke(ctx, DataSourceService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceServiceClient) Create(ctx context.Context, in *DataSource, opts ...grpc.CallOption) (*DataSource, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataSource)
	err := c.cc.Invoke(ctx, DataSourceService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceServiceClient) Update(ctx context.Context, in *UpdateDataSource, opts ...grpc.CallOption) (*DataSource, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataSource)
	err := c.cc.Invoke(ctx, DataSourceService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourceServiceClient) Delete(ctx context.Context, in *DataSourceDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataSourceService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSourceServiceServer is the server API for DataSourceService service.
// All implementations must embed UnimplementedDataSourceServiceServer
// for forward compatibility.
type DataSourceServiceServer interface {
	List(context.Context, *DataSourceListParams) (*DataSourceListResponse, error)
	Get(context.Context, *DataSourceGetRequest) (*DataSource, error)
	Create(context.Context, *DataSource) (*DataSource, error)
	Update(context.Context, *UpdateDataSource) (*DataSource, error)
	Delete(context.Context, *DataSourceDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDataSourceServiceServer()
}

// UnimplementedDataSourceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataSourceServiceServer struct{}

func (UnimplementedDataSourceServiceServer) List(context.Context, *DataSourceListParams) (*DataSourceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDataSourceServiceServer) Get(context.Context, *DataSourceGetRequest) (*DataSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDataSourceServiceServer) Create(context.Context, *DataSource) (*DataSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDataSourceServiceServer) Update(context.Context, *UpdateDataSource) (*DataSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDataSourceServiceServer) Delete(context.Context, *DataSourceDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDataSourceServiceServer) mustEmbedUnimplementedDataSourceServiceServer() {}
func (UnimplementedDataSourceServiceServer) testEmbeddedByValue()                           {}

// UnsafeDataSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSourceServiceServer will
// result in compilation errors.
type UnsafeDataSourceServiceServer interface {
	mustEmbedUnimplementedDataSourceServiceServer()
}

func RegisterDataSourceServiceServer(s grpc.ServiceRegistrar, srv DataSourceServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataSourceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataSourceService_ServiceDesc, srv)
}

func _DataSourceService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceListParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourceService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServiceServer).List(ctx, req.(*DataSourceListParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourceService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServiceServer).Get(ctx, req.(*DataSourceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourceService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServiceServer).Create(ctx, req.(*DataSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourceService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServiceServer).Update(ctx, req.(*UpdateDataSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSourceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourceService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceServiceServer).Delete(ctx, req.(*DataSourceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataSourceService_ServiceDesc is the grpc.ServiceDesc for DataSourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DataSourceService",
	HandlerType: (*DataSourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _DataSourceService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DataSourceService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DataSourceService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DataSourceService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DataSourceService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/data_source.service.proto",
}
