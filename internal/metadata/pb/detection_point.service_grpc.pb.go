// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: services/detection_point.service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DetectionPointService_ListDetectionPoints_FullMethodName       = "/pb.DetectionPointService/ListDetectionPoints"
	DetectionPointService_GetDetectionPoint_FullMethodName         = "/pb.DetectionPointService/GetDetectionPoint"
	DetectionPointService_CreateDetectionPoints_FullMethodName     = "/pb.DetectionPointService/CreateDetectionPoints"
	DetectionPointService_CreateManyDetectionPoints_FullMethodName = "/pb.DetectionPointService/CreateManyDetectionPoints"
	DetectionPointService_UpdateDetectionPoint_FullMethodName      = "/pb.DetectionPointService/UpdateDetectionPoint"
	DetectionPointService_DeleteDetectionPoint_FullMethodName      = "/pb.DetectionPointService/DeleteDetectionPoint"
	DetectionPointService_DeleteAllDetectionPoint_FullMethodName   = "/pb.DetectionPointService/DeleteAllDetectionPoint"
	DetectionPointService_BulkCreateDetectionPoints_FullMethodName = "/pb.DetectionPointService/BulkCreateDetectionPoints"
)

// DetectionPointServiceClient is the client API for DetectionPointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetectionPointServiceClient interface {
	ListDetectionPoints(ctx context.Context, in *ListDetectionPointsRequest, opts ...grpc.CallOption) (*ListDetectionPointsResponse, error)
	GetDetectionPoint(ctx context.Context, in *GetDetectionPointRequest, opts ...grpc.CallOption) (*DetectionPoint, error)
	CreateDetectionPoints(ctx context.Context, in *CreateDetectionPointRequest, opts ...grpc.CallOption) (*DetectionPoint, error)
	CreateManyDetectionPoints(ctx context.Context, in *CreateManyDetectionPointRequest, opts ...grpc.CallOption) (*CreateManyDetectionPointsResponse, error)
	UpdateDetectionPoint(ctx context.Context, in *UpdateDetectionPointRequest, opts ...grpc.CallOption) (*DetectionPoint, error)
	DeleteDetectionPoint(ctx context.Context, in *DeleteDetectionPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAllDetectionPoint(ctx context.Context, in *DeleteDetectionPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkCreateDetectionPoints(ctx context.Context, in *BulkDetectionPointRequest, opts ...grpc.CallOption) (*BulkDetectionPointResponse, error)
}

type detectionPointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectionPointServiceClient(cc grpc.ClientConnInterface) DetectionPointServiceClient {
	return &detectionPointServiceClient{cc}
}

func (c *detectionPointServiceClient) ListDetectionPoints(ctx context.Context, in *ListDetectionPointsRequest, opts ...grpc.CallOption) (*ListDetectionPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDetectionPointsResponse)
	err := c.cc.Invoke(ctx, DetectionPointService_ListDetectionPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionPointServiceClient) GetDetectionPoint(ctx context.Context, in *GetDetectionPointRequest, opts ...grpc.CallOption) (*DetectionPoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectionPoint)
	err := c.cc.Invoke(ctx, DetectionPointService_GetDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionPointServiceClient) CreateDetectionPoints(ctx context.Context, in *CreateDetectionPointRequest, opts ...grpc.CallOption) (*DetectionPoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectionPoint)
	err := c.cc.Invoke(ctx, DetectionPointService_CreateDetectionPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionPointServiceClient) CreateManyDetectionPoints(ctx context.Context, in *CreateManyDetectionPointRequest, opts ...grpc.CallOption) (*CreateManyDetectionPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateManyDetectionPointsResponse)
	err := c.cc.Invoke(ctx, DetectionPointService_CreateManyDetectionPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionPointServiceClient) UpdateDetectionPoint(ctx context.Context, in *UpdateDetectionPointRequest, opts ...grpc.CallOption) (*DetectionPoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectionPoint)
	err := c.cc.Invoke(ctx, DetectionPointService_UpdateDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionPointServiceClient) DeleteDetectionPoint(ctx context.Context, in *DeleteDetectionPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DetectionPointService_DeleteDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionPointServiceClient) DeleteAllDetectionPoint(ctx context.Context, in *DeleteDetectionPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DetectionPointService_DeleteAllDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectionPointServiceClient) BulkCreateDetectionPoints(ctx context.Context, in *BulkDetectionPointRequest, opts ...grpc.CallOption) (*BulkDetectionPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkDetectionPointResponse)
	err := c.cc.Invoke(ctx, DetectionPointService_BulkCreateDetectionPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetectionPointServiceServer is the server API for DetectionPointService service.
// All implementations must embed UnimplementedDetectionPointServiceServer
// for forward compatibility.
type DetectionPointServiceServer interface {
	ListDetectionPoints(context.Context, *ListDetectionPointsRequest) (*ListDetectionPointsResponse, error)
	GetDetectionPoint(context.Context, *GetDetectionPointRequest) (*DetectionPoint, error)
	CreateDetectionPoints(context.Context, *CreateDetectionPointRequest) (*DetectionPoint, error)
	CreateManyDetectionPoints(context.Context, *CreateManyDetectionPointRequest) (*CreateManyDetectionPointsResponse, error)
	UpdateDetectionPoint(context.Context, *UpdateDetectionPointRequest) (*DetectionPoint, error)
	DeleteDetectionPoint(context.Context, *DeleteDetectionPointRequest) (*emptypb.Empty, error)
	DeleteAllDetectionPoint(context.Context, *DeleteDetectionPointRequest) (*emptypb.Empty, error)
	BulkCreateDetectionPoints(context.Context, *BulkDetectionPointRequest) (*BulkDetectionPointResponse, error)
	mustEmbedUnimplementedDetectionPointServiceServer()
}

// UnimplementedDetectionPointServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDetectionPointServiceServer struct{}

func (UnimplementedDetectionPointServiceServer) ListDetectionPoints(context.Context, *ListDetectionPointsRequest) (*ListDetectionPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDetectionPoints not implemented")
}
func (UnimplementedDetectionPointServiceServer) GetDetectionPoint(context.Context, *GetDetectionPointRequest) (*DetectionPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetectionPoint not implemented")
}
func (UnimplementedDetectionPointServiceServer) CreateDetectionPoints(context.Context, *CreateDetectionPointRequest) (*DetectionPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDetectionPoints not implemented")
}
func (UnimplementedDetectionPointServiceServer) CreateManyDetectionPoints(context.Context, *CreateManyDetectionPointRequest) (*CreateManyDetectionPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManyDetectionPoints not implemented")
}
func (UnimplementedDetectionPointServiceServer) UpdateDetectionPoint(context.Context, *UpdateDetectionPointRequest) (*DetectionPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDetectionPoint not implemented")
}
func (UnimplementedDetectionPointServiceServer) DeleteDetectionPoint(context.Context, *DeleteDetectionPointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDetectionPoint not implemented")
}
func (UnimplementedDetectionPointServiceServer) DeleteAllDetectionPoint(context.Context, *DeleteDetectionPointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllDetectionPoint not implemented")
}
func (UnimplementedDetectionPointServiceServer) BulkCreateDetectionPoints(context.Context, *BulkDetectionPointRequest) (*BulkDetectionPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateDetectionPoints not implemented")
}
func (UnimplementedDetectionPointServiceServer) mustEmbedUnimplementedDetectionPointServiceServer() {}
func (UnimplementedDetectionPointServiceServer) testEmbeddedByValue()                               {}

// UnsafeDetectionPointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetectionPointServiceServer will
// result in compilation errors.
type UnsafeDetectionPointServiceServer interface {
	mustEmbedUnimplementedDetectionPointServiceServer()
}

func RegisterDetectionPointServiceServer(s grpc.ServiceRegistrar, srv DetectionPointServiceServer) {
	// If the following call pancis, it indicates UnimplementedDetectionPointServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DetectionPointService_ServiceDesc, srv)
}

func _DetectionPointService_ListDetectionPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetectionPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionPointServiceServer).ListDetectionPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionPointService_ListDetectionPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionPointServiceServer).ListDetectionPoints(ctx, req.(*ListDetectionPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionPointService_GetDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionPointServiceServer).GetDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionPointService_GetDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionPointServiceServer).GetDetectionPoint(ctx, req.(*GetDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionPointService_CreateDetectionPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionPointServiceServer).CreateDetectionPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionPointService_CreateDetectionPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionPointServiceServer).CreateDetectionPoints(ctx, req.(*CreateDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionPointService_CreateManyDetectionPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManyDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionPointServiceServer).CreateManyDetectionPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionPointService_CreateManyDetectionPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionPointServiceServer).CreateManyDetectionPoints(ctx, req.(*CreateManyDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionPointService_UpdateDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionPointServiceServer).UpdateDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionPointService_UpdateDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionPointServiceServer).UpdateDetectionPoint(ctx, req.(*UpdateDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionPointService_DeleteDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionPointServiceServer).DeleteDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionPointService_DeleteDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionPointServiceServer).DeleteDetectionPoint(ctx, req.(*DeleteDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionPointService_DeleteAllDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionPointServiceServer).DeleteAllDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionPointService_DeleteAllDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionPointServiceServer).DeleteAllDetectionPoint(ctx, req.(*DeleteDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetectionPointService_BulkCreateDetectionPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionPointServiceServer).BulkCreateDetectionPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetectionPointService_BulkCreateDetectionPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionPointServiceServer).BulkCreateDetectionPoints(ctx, req.(*BulkDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DetectionPointService_ServiceDesc is the grpc.ServiceDesc for DetectionPointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetectionPointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DetectionPointService",
	HandlerType: (*DetectionPointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDetectionPoints",
			Handler:    _DetectionPointService_ListDetectionPoints_Handler,
		},
		{
			MethodName: "GetDetectionPoint",
			Handler:    _DetectionPointService_GetDetectionPoint_Handler,
		},
		{
			MethodName: "CreateDetectionPoints",
			Handler:    _DetectionPointService_CreateDetectionPoints_Handler,
		},
		{
			MethodName: "CreateManyDetectionPoints",
			Handler:    _DetectionPointService_CreateManyDetectionPoints_Handler,
		},
		{
			MethodName: "UpdateDetectionPoint",
			Handler:    _DetectionPointService_UpdateDetectionPoint_Handler,
		},
		{
			MethodName: "DeleteDetectionPoint",
			Handler:    _DetectionPointService_DeleteDetectionPoint_Handler,
		},
		{
			MethodName: "DeleteAllDetectionPoint",
			Handler:    _DetectionPointService_DeleteAllDetectionPoint_Handler,
		},
		{
			MethodName: "BulkCreateDetectionPoints",
			Handler:    _DetectionPointService_BulkCreateDetectionPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/detection_point.service.proto",
}
