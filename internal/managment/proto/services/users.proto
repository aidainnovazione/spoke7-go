syntax = "proto3";

package pb;

option go_package = "internal/managment/pb";

import "dtos/user.proto";
import "services/auth.proto";
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";

import "protoc-gen-openapiv2/options/annotations.proto";




option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
      
    }
  }
};






service UserService {   
  
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
      option (method_authorization_scope) =  {
        required_permissions: "user:list"
      };

      option (google.api.http) = {
        get: "/api/v1/users"
      };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }

    rpc CreateUser(UserInfo) returns (UserInfo) {
      option (method_authorization_scope) =  {
        required_permissions: "user:create"
      };
    
      option (google.api.http) = {
        post: "/api/v1/users"
        body: "*"
      };
    
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        security: {
          security_requirement: {
            key: "bearer";
          }
        }
      };
    }

    rpc UpdateUser(UserInfo) returns (UserInfo) {
      option (method_authorization_scope) = {
        required_permissions: "user:update"
      };
      option (google.api.http) = {
        put: "/api/v1/users/{name}"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        security: {
          security_requirement: {
            key: "bearer";
          }
        }
      };
    }

  rpc GetUser(GetUserRequest) returns (UserInfo) {
    option (method_authorization_scope) = {
      required_permissions: "user:read"
    };
    option (google.api.http) = {
      get: "/api/v1/users/{name}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }

  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (method_authorization_scope) =  {
      required_permissions: "user:delete"
      restricted : true 
    };
  
    option (google.api.http) = {
      delete: "/api/v1/users/{name}"
    };
  
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }
  
  
  rpc GetSelfPermissions(GetUserCasbinContextRequest) returns ( GetUserPermissionsResponse) {
    
    option (google.api.http) = {
      get: "/api/v1/users/permissions"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: { security_requirement: { key: "bearer"; } }
    };
  
  }


  rpc GetUserPermissions(GetUserPermissionRequest) returns ( GetUserPermissionsResponse) {
    
       option (method_authorization_scope) =  {
      required_permissions: "user:read"
      restricted : true 
    };

    option (google.api.http) = {
      get: "/api/v1/users/{name}/permissions"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: { security_requirement: { key: "bearer"; } }
    };
  
  }


  rpc SetUserPermissions(SetUserPermissionRequest) returns ( SetUserPermissionsResponse) {
    
       option (method_authorization_scope) =  {
      required_permissions: "user:permissions"
      restricted : true 
    };

    option (google.api.http) = {
      post: "/api/v1/users/{name}/permissions"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: { security_requirement: { key: "bearer"; } }
    };
  
  }

}

  message ListUsersRequest {
    string query = 1;  // e.g. for filtering or autocomplete
    int32 page = 2;
    int32 page_size = 3;
  }
  

  message ListUsersResponse {
    repeated UserInfo users = 1;
  }

  message GetUserRequest {
    string name = 1;
  }
  
  message DeleteUserRequest {
    string name = 1;
  }

  message DeleteUserResponse {
    bool ok = 1;
  }



  message GetUserCasbinContextRequest {}

  message GetUserPermissionRequest {
    string name = 1;
  }

  message SetUserPermissionRequest {
    string name = 1;
    repeated string permissions = 2;
  }
  
  message SetUserPermissionsResponse {
    repeated FeaturePermissionEntry permissions = 1;
  }

  // Response with the casbin context
  message GetUserPermissionsResponse {
    repeated FeaturePermissionEntry permissions = 1;
  }


  message FeaturePermissionEntry {
  string key = 1;
  repeated string values = 2;
}

