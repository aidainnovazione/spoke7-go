syntax = "proto3";

package pb;

option go_package = "internal/sumo-integration/pb";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "dtos/sumo_xml_file.proto";



option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
};

service SumoIntegrationDataSourceService {


  // Import road network from XML file
  // return id of the created road network or an error message
  // @Summary Import road network from XML file
  // @Description Import road network from XML file
  // @Tags SumoIntegration
  // @Accept json
  // @Produce json
  // @Param xml body XmlFile true "XML file"
  // @Success 200 {object} RoadNetworkImportResponse
  rpc ImportRoadNetworkFromXml(RoadNetworkImportRequest) returns (RoadNetworkImportResponse) {
    option (google.api.http) = {
      post: "/api/v1/roadnetwork/import",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }


  rpc ImportFromXml(ImportRequest) returns (ImportResponse) {
    option (google.api.http) = {
      post: "/api/v1/datasource/{data_source}/import",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "bearer";
        }
      }
    };
  }

}


message RoadNetworkImportRequest {
  string name = 1; // Name of the road network
  XmlFile xml = 2;
}
message RoadNetworkImportResponse {
  string id = 1; // ID of the created road network
  string message = 2; // Success or error message
}


message ImportRequest{ 
  string data_source = 1; // Name of the data source
  string networkName = 2;
  XmlFile configFile = 3;
  XmlFile netFile = 4;
  XmlFile routeFiles = 5;
  XmlFile additionsFiles = 6;
}
message ImportResponse{
  int64 netCount = 1; // number of detection point created
  int64 routeCount = 2; // number of detection point created
  int64 additionalCount = 3; // number of detection point created
  string message = 4; // Success or error message
}