// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: services/stored_file.service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StoredFileService_List_FullMethodName     = "/pb.StoredFileService/List"
	StoredFileService_Upload_FullMethodName   = "/pb.StoredFileService/Upload"
	StoredFileService_Get_FullMethodName      = "/pb.StoredFileService/Get"
	StoredFileService_Download_FullMethodName = "/pb.StoredFileService/Download"
	StoredFileService_Update_FullMethodName   = "/pb.StoredFileService/Update"
	StoredFileService_Delete_FullMethodName   = "/pb.StoredFileService/Delete"
)

// StoredFileServiceClient is the client API for StoredFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoredFileServiceClient interface {
	List(ctx context.Context, in *StoredFileListParams, opts ...grpc.CallOption) (*StoredFileListResponse, error)
	Upload(ctx context.Context, in *StoredFileUploadRequest, opts ...grpc.CallOption) (*StoredFile, error)
	Get(ctx context.Context, in *StoredFileGetRequest, opts ...grpc.CallOption) (*StoredFile, error)
	Download(ctx context.Context, in *StoredFileDownloadRequest, opts ...grpc.CallOption) (*StoredFileDownloadResponse, error)
	Update(ctx context.Context, in *StoredFileUpdateRequest, opts ...grpc.CallOption) (*StoredFile, error)
	Delete(ctx context.Context, in *StoredFileDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type storedFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoredFileServiceClient(cc grpc.ClientConnInterface) StoredFileServiceClient {
	return &storedFileServiceClient{cc}
}

func (c *storedFileServiceClient) List(ctx context.Context, in *StoredFileListParams, opts ...grpc.CallOption) (*StoredFileListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoredFileListResponse)
	err := c.cc.Invoke(ctx, StoredFileService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storedFileServiceClient) Upload(ctx context.Context, in *StoredFileUploadRequest, opts ...grpc.CallOption) (*StoredFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoredFile)
	err := c.cc.Invoke(ctx, StoredFileService_Upload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storedFileServiceClient) Get(ctx context.Context, in *StoredFileGetRequest, opts ...grpc.CallOption) (*StoredFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoredFile)
	err := c.cc.Invoke(ctx, StoredFileService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storedFileServiceClient) Download(ctx context.Context, in *StoredFileDownloadRequest, opts ...grpc.CallOption) (*StoredFileDownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoredFileDownloadResponse)
	err := c.cc.Invoke(ctx, StoredFileService_Download_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storedFileServiceClient) Update(ctx context.Context, in *StoredFileUpdateRequest, opts ...grpc.CallOption) (*StoredFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoredFile)
	err := c.cc.Invoke(ctx, StoredFileService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storedFileServiceClient) Delete(ctx context.Context, in *StoredFileDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StoredFileService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoredFileServiceServer is the server API for StoredFileService service.
// All implementations must embed UnimplementedStoredFileServiceServer
// for forward compatibility.
type StoredFileServiceServer interface {
	List(context.Context, *StoredFileListParams) (*StoredFileListResponse, error)
	Upload(context.Context, *StoredFileUploadRequest) (*StoredFile, error)
	Get(context.Context, *StoredFileGetRequest) (*StoredFile, error)
	Download(context.Context, *StoredFileDownloadRequest) (*StoredFileDownloadResponse, error)
	Update(context.Context, *StoredFileUpdateRequest) (*StoredFile, error)
	Delete(context.Context, *StoredFileDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedStoredFileServiceServer()
}

// UnimplementedStoredFileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStoredFileServiceServer struct{}

func (UnimplementedStoredFileServiceServer) List(context.Context, *StoredFileListParams) (*StoredFileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStoredFileServiceServer) Upload(context.Context, *StoredFileUploadRequest) (*StoredFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedStoredFileServiceServer) Get(context.Context, *StoredFileGetRequest) (*StoredFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStoredFileServiceServer) Download(context.Context, *StoredFileDownloadRequest) (*StoredFileDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedStoredFileServiceServer) Update(context.Context, *StoredFileUpdateRequest) (*StoredFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStoredFileServiceServer) Delete(context.Context, *StoredFileDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStoredFileServiceServer) mustEmbedUnimplementedStoredFileServiceServer() {}
func (UnimplementedStoredFileServiceServer) testEmbeddedByValue()                           {}

// UnsafeStoredFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoredFileServiceServer will
// result in compilation errors.
type UnsafeStoredFileServiceServer interface {
	mustEmbedUnimplementedStoredFileServiceServer()
}

func RegisterStoredFileServiceServer(s grpc.ServiceRegistrar, srv StoredFileServiceServer) {
	// If the following call pancis, it indicates UnimplementedStoredFileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StoredFileService_ServiceDesc, srv)
}

func _StoredFileService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoredFileListParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoredFileServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoredFileService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoredFileServiceServer).List(ctx, req.(*StoredFileListParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoredFileService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoredFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoredFileServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoredFileService_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoredFileServiceServer).Upload(ctx, req.(*StoredFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoredFileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoredFileGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoredFileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoredFileService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoredFileServiceServer).Get(ctx, req.(*StoredFileGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoredFileService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoredFileDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoredFileServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoredFileService_Download_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoredFileServiceServer).Download(ctx, req.(*StoredFileDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoredFileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoredFileUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoredFileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoredFileService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoredFileServiceServer).Update(ctx, req.(*StoredFileUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoredFileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoredFileDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoredFileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoredFileService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoredFileServiceServer).Delete(ctx, req.(*StoredFileDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoredFileService_ServiceDesc is the grpc.ServiceDesc for StoredFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoredFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StoredFileService",
	HandlerType: (*StoredFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StoredFileService_List_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _StoredFileService_Upload_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StoredFileService_Get_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _StoredFileService_Download_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StoredFileService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StoredFileService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/stored_file.service.proto",
}
