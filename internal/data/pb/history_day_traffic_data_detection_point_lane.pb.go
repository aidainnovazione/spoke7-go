// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.1
// source: dtos/history_day_traffic_data_detection_point_lane.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HistoryDayTrafficDataByDetectionPointByLane struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ModifiedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	DataSourceName string                 `protobuf:"bytes,3,opt,name=data_source_name,json=dataSourceName,proto3" json:"data_source_name,omitempty"`
	LaneId         string                 `protobuf:"bytes,4,opt,name=lane_id,json=laneId,proto3" json:"lane_id,omitempty"`
	// campi relativi all'interallo di aggregazione di 24 h -> dipende dal db
	DetectionTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=detection_timestamp,json=detectionTimestamp,proto3" json:"detection_timestamp,omitempty"`
	DetectionInterval  uint32                 `protobuf:"varint,6,opt,name=detection_interval,json=detectionInterval,proto3" json:"detection_interval,omitempty"`
	// flusso - a partire dai conteggi
	TrafficFlowVehicleClass_1         float32 `protobuf:"fixed32,7,opt,name=traffic_flow_vehicle_class_1,json=trafficFlowVehicleClass1,proto3" json:"traffic_flow_vehicle_class_1,omitempty"`
	TrafficFlowVehicleClass_2         float32 `protobuf:"fixed32,8,opt,name=traffic_flow_vehicle_class_2,json=trafficFlowVehicleClass2,proto3" json:"traffic_flow_vehicle_class_2,omitempty"`
	TrafficFlowVehicleClass_3         float32 `protobuf:"fixed32,9,opt,name=traffic_flow_vehicle_class_3,json=trafficFlowVehicleClass3,proto3" json:"traffic_flow_vehicle_class_3,omitempty"`
	TrafficFlowVehicleClass_4         float32 `protobuf:"fixed32,10,opt,name=traffic_flow_vehicle_class_4,json=trafficFlowVehicleClass4,proto3" json:"traffic_flow_vehicle_class_4,omitempty"`
	TrafficFlowVehicleClass_5         float32 `protobuf:"fixed32,11,opt,name=traffic_flow_vehicle_class_5,json=trafficFlowVehicleClass5,proto3" json:"traffic_flow_vehicle_class_5,omitempty"`
	TrafficFlowVehicleClass_6         float32 `protobuf:"fixed32,12,opt,name=traffic_flow_vehicle_class_6,json=trafficFlowVehicleClass6,proto3" json:"traffic_flow_vehicle_class_6,omitempty"`
	TrafficFlowVehicleClass_7         float32 `protobuf:"fixed32,13,opt,name=traffic_flow_vehicle_class_7,json=trafficFlowVehicleClass7,proto3" json:"traffic_flow_vehicle_class_7,omitempty"`
	TrafficFlowVehicleClass_8         float32 `protobuf:"fixed32,14,opt,name=traffic_flow_vehicle_class_8,json=trafficFlowVehicleClass8,proto3" json:"traffic_flow_vehicle_class_8,omitempty"`
	TrafficFlowVehicleClassEquivalent float32 `protobuf:"fixed32,15,opt,name=traffic_flow_vehicle_class_equivalent,json=trafficFlowVehicleClassEquivalent,proto3" json:"traffic_flow_vehicle_class_equivalent,omitempty"`
	// - media
	AverageSpeedVehicleClass_1  float32 `protobuf:"fixed32,16,opt,name=average_speed_vehicle_class_1,json=averageSpeedVehicleClass1,proto3" json:"average_speed_vehicle_class_1,omitempty"`
	AverageSpeedVehicleClass_2  float32 `protobuf:"fixed32,17,opt,name=average_speed_vehicle_class_2,json=averageSpeedVehicleClass2,proto3" json:"average_speed_vehicle_class_2,omitempty"`
	AverageSpeedVehicleClass_3  float32 `protobuf:"fixed32,18,opt,name=average_speed_vehicle_class_3,json=averageSpeedVehicleClass3,proto3" json:"average_speed_vehicle_class_3,omitempty"`
	AverageSpeedVehicleClass_4  float32 `protobuf:"fixed32,19,opt,name=average_speed_vehicle_class_4,json=averageSpeedVehicleClass4,proto3" json:"average_speed_vehicle_class_4,omitempty"`
	AverageSpeedVehicleClass_5  float32 `protobuf:"fixed32,20,opt,name=average_speed_vehicle_class_5,json=averageSpeedVehicleClass5,proto3" json:"average_speed_vehicle_class_5,omitempty"`
	AverageSpeedVehicleClass_6  float32 `protobuf:"fixed32,21,opt,name=average_speed_vehicle_class_6,json=averageSpeedVehicleClass6,proto3" json:"average_speed_vehicle_class_6,omitempty"`
	AverageSpeedVehicleClass_7  float32 `protobuf:"fixed32,22,opt,name=average_speed_vehicle_class_7,json=averageSpeedVehicleClass7,proto3" json:"average_speed_vehicle_class_7,omitempty"`
	AverageSpeedVehicleClass_8  float32 `protobuf:"fixed32,23,opt,name=average_speed_vehicle_class_8,json=averageSpeedVehicleClass8,proto3" json:"average_speed_vehicle_class_8,omitempty"`
	AverageSpeedVehicleClassAll float32 `protobuf:"fixed32,24,opt,name=average_speed_vehicle_class_all,json=averageSpeedVehicleClassAll,proto3" json:"average_speed_vehicle_class_all,omitempty"`
	// lunghezza
	AverageVehicleLength float32 `protobuf:"fixed32,25,opt,name=average_vehicle_length,json=averageVehicleLength,proto3" json:"average_vehicle_length,omitempty"`
	// headway fra veicoli
	AverageHeadway float32 `protobuf:"fixed32,26,opt,name=average_headway,json=averageHeadway,proto3" json:"average_headway,omitempty"`
	// time-to-collision
	AverageTimeToCollision float32 `protobuf:"fixed32,27,opt,name=average_time_to_collision,json=averageTimeToCollision,proto3" json:"average_time_to_collision,omitempty"`
	// Valore minimo, medio, massimo e deviazione standard del flusso orario
	// Per categoria di veicoli
	// Per corsia
	TrafficFlowParametersVehicleClass_1 *TrafficFlowParametersByDay `protobuf:"bytes,28,opt,name=traffic_flow_parameters_vehicle_class_1,json=trafficFlowParametersVehicleClass1,proto3" json:"traffic_flow_parameters_vehicle_class_1,omitempty"`
	TrafficFlowParametersVehicleClass_2 *TrafficFlowParametersByDay `protobuf:"bytes,29,opt,name=traffic_flow_parameters_vehicle_class_2,json=trafficFlowParametersVehicleClass2,proto3" json:"traffic_flow_parameters_vehicle_class_2,omitempty"`
	TrafficFlowParametersVehicleClass_3 *TrafficFlowParametersByDay `protobuf:"bytes,30,opt,name=traffic_flow_parameters_vehicle_class_3,json=trafficFlowParametersVehicleClass3,proto3" json:"traffic_flow_parameters_vehicle_class_3,omitempty"`
	TrafficFlowParametersVehicleClass_4 *TrafficFlowParametersByDay `protobuf:"bytes,31,opt,name=traffic_flow_parameters_vehicle_class_4,json=trafficFlowParametersVehicleClass4,proto3" json:"traffic_flow_parameters_vehicle_class_4,omitempty"`
	TrafficFlowParametersVehicleClass_5 *TrafficFlowParametersByDay `protobuf:"bytes,32,opt,name=traffic_flow_parameters_vehicle_class_5,json=trafficFlowParametersVehicleClass5,proto3" json:"traffic_flow_parameters_vehicle_class_5,omitempty"`
	TrafficFlowParametersVehicleClass_6 *TrafficFlowParametersByDay `protobuf:"bytes,33,opt,name=traffic_flow_parameters_vehicle_class_6,json=trafficFlowParametersVehicleClass6,proto3" json:"traffic_flow_parameters_vehicle_class_6,omitempty"`
	TrafficFlowParametersVehicleClass_7 *TrafficFlowParametersByDay `protobuf:"bytes,34,opt,name=traffic_flow_parameters_vehicle_class_7,json=trafficFlowParametersVehicleClass7,proto3" json:"traffic_flow_parameters_vehicle_class_7,omitempty"`
	TrafficFlowParametersVehicleClass_8 *TrafficFlowParametersByDay `protobuf:"bytes,35,opt,name=traffic_flow_parameters_vehicle_class_8,json=trafficFlowParametersVehicleClass8,proto3" json:"traffic_flow_parameters_vehicle_class_8,omitempty"`
	// definiamo tre classi di velocità: 0-50, 50-100, 100-300
	InstantaneousSpeedVelClass_1MaxFlow float32 `protobuf:"fixed32,36,opt,name=instantaneous_speed_vel_class_1_max_flow,json=instantaneousSpeedVelClass1MaxFlow,proto3" json:"instantaneous_speed_vel_class_1_max_flow,omitempty"`
	InstantaneousSpeedVelClass_2MaxFlow float32 `protobuf:"fixed32,37,opt,name=instantaneous_speed_vel_class_2_max_flow,json=instantaneousSpeedVelClass2MaxFlow,proto3" json:"instantaneous_speed_vel_class_2_max_flow,omitempty"`
	InstantaneousSpeedVelClass_3MaxFlow float32 `protobuf:"fixed32,38,opt,name=instantaneous_speed_vel_class_3_max_flow,json=instantaneousSpeedVelClass3MaxFlow,proto3" json:"instantaneous_speed_vel_class_3_max_flow,omitempty"`
	// Numerosità delle velocità istantanee rilevate all’interno di prefissate classi
	// di velocità (propedeutica alla funzione di distribuzione di velocità),
	// calcolato con riferimento alla aggregazione di tutte le fasce orarie con
	// flusso non superiore ad 1/10 del flusso giornaliero massimo.
	InstantaneousSpeedVelClass_1MinFlow float32 `protobuf:"fixed32,39,opt,name=instantaneous_speed_vel_class_1_min_flow,json=instantaneousSpeedVelClass1MinFlow,proto3" json:"instantaneous_speed_vel_class_1_min_flow,omitempty"`
	InstantaneousSpeedVelClass_2MinFlow float32 `protobuf:"fixed32,40,opt,name=instantaneous_speed_vel_class_2_min_flow,json=instantaneousSpeedVelClass2MinFlow,proto3" json:"instantaneous_speed_vel_class_2_min_flow,omitempty"`
	InstantaneousSpeedVelClass_3MinFlow float32 `protobuf:"fixed32,41,opt,name=instantaneous_speed_vel_class_3_min_flow,json=instantaneousSpeedVelClass3MinFlow,proto3" json:"instantaneous_speed_vel_class_3_min_flow,omitempty"`
	// Numerosità degli headway all’interno di prefissate classi di headway
	// (propedeutica alla funzione di distribuzione), calcolato con riferimento
	// alla fascia di maggior flusso orario.
	HeadwayVelClass_1MaxFlow float32 `protobuf:"fixed32,42,opt,name=headway_vel_class_1_max_flow,json=headwayVelClass1MaxFlow,proto3" json:"headway_vel_class_1_max_flow,omitempty"`
	HeadwayVelClass_2MaxFlow float32 `protobuf:"fixed32,43,opt,name=headway_vel_class_2_max_flow,json=headwayVelClass2MaxFlow,proto3" json:"headway_vel_class_2_max_flow,omitempty"`
	HeadwayVelClass_3MaxFlow float32 `protobuf:"fixed32,44,opt,name=headway_vel_class_3_max_flow,json=headwayVelClass3MaxFlow,proto3" json:"headway_vel_class_3_max_flow,omitempty"`
	// Numerosità degli headway all’interno di prefissate classi di headway
	// (propedeutica alla funzione di distribuzione), calcolato con riferimento
	// alla aggregazione di tutte le fasce orarie con flusso non superiore ad 1/10
	// del flusso giornaliero massimo.
	HeadwayVelClass_1MinFlow float32 `protobuf:"fixed32,45,opt,name=headway_vel_class_1_min_flow,json=headwayVelClass1MinFlow,proto3" json:"headway_vel_class_1_min_flow,omitempty"`
	HeadwayVelClass_2MinFlow float32 `protobuf:"fixed32,46,opt,name=headway_vel_class_2_min_flow,json=headwayVelClass2MinFlow,proto3" json:"headway_vel_class_2_min_flow,omitempty"`
	HeadwayVelClass_3MinFlow float32 `protobuf:"fixed32,47,opt,name=headway_vel_class_3_min_flow,json=headwayVelClass3MinFlow,proto3" json:"headway_vel_class_3_min_flow,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) Reset() {
	*x = HistoryDayTrafficDataByDetectionPointByLane{}
	mi := &file_dtos_history_day_traffic_data_detection_point_lane_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryDayTrafficDataByDetectionPointByLane) ProtoMessage() {}

func (x *HistoryDayTrafficDataByDetectionPointByLane) ProtoReflect() protoreflect.Message {
	mi := &file_dtos_history_day_traffic_data_detection_point_lane_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryDayTrafficDataByDetectionPointByLane.ProtoReflect.Descriptor instead.
func (*HistoryDayTrafficDataByDetectionPointByLane) Descriptor() ([]byte, []int) {
	return file_dtos_history_day_traffic_data_detection_point_lane_proto_rawDescGZIP(), []int{0}
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetDataSourceName() string {
	if x != nil {
		return x.DataSourceName
	}
	return ""
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetLaneId() string {
	if x != nil {
		return x.LaneId
	}
	return ""
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetDetectionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DetectionTimestamp
	}
	return nil
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetDetectionInterval() uint32 {
	if x != nil {
		return x.DetectionInterval
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowVehicleClass_1() float32 {
	if x != nil {
		return x.TrafficFlowVehicleClass_1
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowVehicleClass_2() float32 {
	if x != nil {
		return x.TrafficFlowVehicleClass_2
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowVehicleClass_3() float32 {
	if x != nil {
		return x.TrafficFlowVehicleClass_3
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowVehicleClass_4() float32 {
	if x != nil {
		return x.TrafficFlowVehicleClass_4
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowVehicleClass_5() float32 {
	if x != nil {
		return x.TrafficFlowVehicleClass_5
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowVehicleClass_6() float32 {
	if x != nil {
		return x.TrafficFlowVehicleClass_6
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowVehicleClass_7() float32 {
	if x != nil {
		return x.TrafficFlowVehicleClass_7
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowVehicleClass_8() float32 {
	if x != nil {
		return x.TrafficFlowVehicleClass_8
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowVehicleClassEquivalent() float32 {
	if x != nil {
		return x.TrafficFlowVehicleClassEquivalent
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetAverageSpeedVehicleClass_1() float32 {
	if x != nil {
		return x.AverageSpeedVehicleClass_1
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetAverageSpeedVehicleClass_2() float32 {
	if x != nil {
		return x.AverageSpeedVehicleClass_2
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetAverageSpeedVehicleClass_3() float32 {
	if x != nil {
		return x.AverageSpeedVehicleClass_3
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetAverageSpeedVehicleClass_4() float32 {
	if x != nil {
		return x.AverageSpeedVehicleClass_4
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetAverageSpeedVehicleClass_5() float32 {
	if x != nil {
		return x.AverageSpeedVehicleClass_5
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetAverageSpeedVehicleClass_6() float32 {
	if x != nil {
		return x.AverageSpeedVehicleClass_6
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetAverageSpeedVehicleClass_7() float32 {
	if x != nil {
		return x.AverageSpeedVehicleClass_7
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetAverageSpeedVehicleClass_8() float32 {
	if x != nil {
		return x.AverageSpeedVehicleClass_8
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetAverageSpeedVehicleClassAll() float32 {
	if x != nil {
		return x.AverageSpeedVehicleClassAll
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetAverageVehicleLength() float32 {
	if x != nil {
		return x.AverageVehicleLength
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetAverageHeadway() float32 {
	if x != nil {
		return x.AverageHeadway
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetAverageTimeToCollision() float32 {
	if x != nil {
		return x.AverageTimeToCollision
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowParametersVehicleClass_1() *TrafficFlowParametersByDay {
	if x != nil {
		return x.TrafficFlowParametersVehicleClass_1
	}
	return nil
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowParametersVehicleClass_2() *TrafficFlowParametersByDay {
	if x != nil {
		return x.TrafficFlowParametersVehicleClass_2
	}
	return nil
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowParametersVehicleClass_3() *TrafficFlowParametersByDay {
	if x != nil {
		return x.TrafficFlowParametersVehicleClass_3
	}
	return nil
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowParametersVehicleClass_4() *TrafficFlowParametersByDay {
	if x != nil {
		return x.TrafficFlowParametersVehicleClass_4
	}
	return nil
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowParametersVehicleClass_5() *TrafficFlowParametersByDay {
	if x != nil {
		return x.TrafficFlowParametersVehicleClass_5
	}
	return nil
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowParametersVehicleClass_6() *TrafficFlowParametersByDay {
	if x != nil {
		return x.TrafficFlowParametersVehicleClass_6
	}
	return nil
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowParametersVehicleClass_7() *TrafficFlowParametersByDay {
	if x != nil {
		return x.TrafficFlowParametersVehicleClass_7
	}
	return nil
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetTrafficFlowParametersVehicleClass_8() *TrafficFlowParametersByDay {
	if x != nil {
		return x.TrafficFlowParametersVehicleClass_8
	}
	return nil
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetInstantaneousSpeedVelClass_1MaxFlow() float32 {
	if x != nil {
		return x.InstantaneousSpeedVelClass_1MaxFlow
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetInstantaneousSpeedVelClass_2MaxFlow() float32 {
	if x != nil {
		return x.InstantaneousSpeedVelClass_2MaxFlow
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetInstantaneousSpeedVelClass_3MaxFlow() float32 {
	if x != nil {
		return x.InstantaneousSpeedVelClass_3MaxFlow
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetInstantaneousSpeedVelClass_1MinFlow() float32 {
	if x != nil {
		return x.InstantaneousSpeedVelClass_1MinFlow
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetInstantaneousSpeedVelClass_2MinFlow() float32 {
	if x != nil {
		return x.InstantaneousSpeedVelClass_2MinFlow
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetInstantaneousSpeedVelClass_3MinFlow() float32 {
	if x != nil {
		return x.InstantaneousSpeedVelClass_3MinFlow
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetHeadwayVelClass_1MaxFlow() float32 {
	if x != nil {
		return x.HeadwayVelClass_1MaxFlow
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetHeadwayVelClass_2MaxFlow() float32 {
	if x != nil {
		return x.HeadwayVelClass_2MaxFlow
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetHeadwayVelClass_3MaxFlow() float32 {
	if x != nil {
		return x.HeadwayVelClass_3MaxFlow
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetHeadwayVelClass_1MinFlow() float32 {
	if x != nil {
		return x.HeadwayVelClass_1MinFlow
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetHeadwayVelClass_2MinFlow() float32 {
	if x != nil {
		return x.HeadwayVelClass_2MinFlow
	}
	return 0
}

func (x *HistoryDayTrafficDataByDetectionPointByLane) GetHeadwayVelClass_3MinFlow() float32 {
	if x != nil {
		return x.HeadwayVelClass_3MinFlow
	}
	return 0
}

var File_dtos_history_day_traffic_data_detection_point_lane_proto protoreflect.FileDescriptor

const file_dtos_history_day_traffic_data_detection_point_lane_proto_rawDesc = "" +
	"\n" +
	"8dtos/history_day_traffic_data_detection_point_lane.proto\x12\x02pb\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1ddtos/traffic_flow_count.proto\"\xcc\x1b\n" +
	"+HistoryDayTrafficDataByDetectionPointByLane\x129\n" +
	"\n" +
	"created_at\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12;\n" +
	"\vmodified_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"modifiedAt\x12(\n" +
	"\x10data_source_name\x18\x03 \x01(\tR\x0edataSourceName\x12\x17\n" +
	"\alane_id\x18\x04 \x01(\tR\x06laneId\x12K\n" +
	"\x13detection_timestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x12detectionTimestamp\x12-\n" +
	"\x12detection_interval\x18\x06 \x01(\rR\x11detectionInterval\x12>\n" +
	"\x1ctraffic_flow_vehicle_class_1\x18\a \x01(\x02R\x18trafficFlowVehicleClass1\x12>\n" +
	"\x1ctraffic_flow_vehicle_class_2\x18\b \x01(\x02R\x18trafficFlowVehicleClass2\x12>\n" +
	"\x1ctraffic_flow_vehicle_class_3\x18\t \x01(\x02R\x18trafficFlowVehicleClass3\x12>\n" +
	"\x1ctraffic_flow_vehicle_class_4\x18\n" +
	" \x01(\x02R\x18trafficFlowVehicleClass4\x12>\n" +
	"\x1ctraffic_flow_vehicle_class_5\x18\v \x01(\x02R\x18trafficFlowVehicleClass5\x12>\n" +
	"\x1ctraffic_flow_vehicle_class_6\x18\f \x01(\x02R\x18trafficFlowVehicleClass6\x12>\n" +
	"\x1ctraffic_flow_vehicle_class_7\x18\r \x01(\x02R\x18trafficFlowVehicleClass7\x12>\n" +
	"\x1ctraffic_flow_vehicle_class_8\x18\x0e \x01(\x02R\x18trafficFlowVehicleClass8\x12P\n" +
	"%traffic_flow_vehicle_class_equivalent\x18\x0f \x01(\x02R!trafficFlowVehicleClassEquivalent\x12@\n" +
	"\x1daverage_speed_vehicle_class_1\x18\x10 \x01(\x02R\x19averageSpeedVehicleClass1\x12@\n" +
	"\x1daverage_speed_vehicle_class_2\x18\x11 \x01(\x02R\x19averageSpeedVehicleClass2\x12@\n" +
	"\x1daverage_speed_vehicle_class_3\x18\x12 \x01(\x02R\x19averageSpeedVehicleClass3\x12@\n" +
	"\x1daverage_speed_vehicle_class_4\x18\x13 \x01(\x02R\x19averageSpeedVehicleClass4\x12@\n" +
	"\x1daverage_speed_vehicle_class_5\x18\x14 \x01(\x02R\x19averageSpeedVehicleClass5\x12@\n" +
	"\x1daverage_speed_vehicle_class_6\x18\x15 \x01(\x02R\x19averageSpeedVehicleClass6\x12@\n" +
	"\x1daverage_speed_vehicle_class_7\x18\x16 \x01(\x02R\x19averageSpeedVehicleClass7\x12@\n" +
	"\x1daverage_speed_vehicle_class_8\x18\x17 \x01(\x02R\x19averageSpeedVehicleClass8\x12D\n" +
	"\x1faverage_speed_vehicle_class_all\x18\x18 \x01(\x02R\x1baverageSpeedVehicleClassAll\x124\n" +
	"\x16average_vehicle_length\x18\x19 \x01(\x02R\x14averageVehicleLength\x12'\n" +
	"\x0faverage_headway\x18\x1a \x01(\x02R\x0eaverageHeadway\x129\n" +
	"\x19average_time_to_collision\x18\x1b \x01(\x02R\x16averageTimeToCollision\x12s\n" +
	"'traffic_flow_parameters_vehicle_class_1\x18\x1c \x01(\v2\x1e.pb.TrafficFlowParametersByDayR\"trafficFlowParametersVehicleClass1\x12s\n" +
	"'traffic_flow_parameters_vehicle_class_2\x18\x1d \x01(\v2\x1e.pb.TrafficFlowParametersByDayR\"trafficFlowParametersVehicleClass2\x12s\n" +
	"'traffic_flow_parameters_vehicle_class_3\x18\x1e \x01(\v2\x1e.pb.TrafficFlowParametersByDayR\"trafficFlowParametersVehicleClass3\x12s\n" +
	"'traffic_flow_parameters_vehicle_class_4\x18\x1f \x01(\v2\x1e.pb.TrafficFlowParametersByDayR\"trafficFlowParametersVehicleClass4\x12s\n" +
	"'traffic_flow_parameters_vehicle_class_5\x18  \x01(\v2\x1e.pb.TrafficFlowParametersByDayR\"trafficFlowParametersVehicleClass5\x12s\n" +
	"'traffic_flow_parameters_vehicle_class_6\x18! \x01(\v2\x1e.pb.TrafficFlowParametersByDayR\"trafficFlowParametersVehicleClass6\x12s\n" +
	"'traffic_flow_parameters_vehicle_class_7\x18\" \x01(\v2\x1e.pb.TrafficFlowParametersByDayR\"trafficFlowParametersVehicleClass7\x12s\n" +
	"'traffic_flow_parameters_vehicle_class_8\x18# \x01(\v2\x1e.pb.TrafficFlowParametersByDayR\"trafficFlowParametersVehicleClass8\x12T\n" +
	"(instantaneous_speed_vel_class_1_max_flow\x18$ \x01(\x02R\"instantaneousSpeedVelClass1MaxFlow\x12T\n" +
	"(instantaneous_speed_vel_class_2_max_flow\x18% \x01(\x02R\"instantaneousSpeedVelClass2MaxFlow\x12T\n" +
	"(instantaneous_speed_vel_class_3_max_flow\x18& \x01(\x02R\"instantaneousSpeedVelClass3MaxFlow\x12T\n" +
	"(instantaneous_speed_vel_class_1_min_flow\x18' \x01(\x02R\"instantaneousSpeedVelClass1MinFlow\x12T\n" +
	"(instantaneous_speed_vel_class_2_min_flow\x18( \x01(\x02R\"instantaneousSpeedVelClass2MinFlow\x12T\n" +
	"(instantaneous_speed_vel_class_3_min_flow\x18) \x01(\x02R\"instantaneousSpeedVelClass3MinFlow\x12=\n" +
	"\x1cheadway_vel_class_1_max_flow\x18* \x01(\x02R\x17headwayVelClass1MaxFlow\x12=\n" +
	"\x1cheadway_vel_class_2_max_flow\x18+ \x01(\x02R\x17headwayVelClass2MaxFlow\x12=\n" +
	"\x1cheadway_vel_class_3_max_flow\x18, \x01(\x02R\x17headwayVelClass3MaxFlow\x12=\n" +
	"\x1cheadway_vel_class_1_min_flow\x18- \x01(\x02R\x17headwayVelClass1MinFlow\x12=\n" +
	"\x1cheadway_vel_class_2_min_flow\x18. \x01(\x02R\x17headwayVelClass2MinFlow\x12=\n" +
	"\x1cheadway_vel_class_3_min_flow\x18/ \x01(\x02R\x17headwayVelClass3MinFlowB\x12Z\x10internal/data/pbb\x06proto3"

var (
	file_dtos_history_day_traffic_data_detection_point_lane_proto_rawDescOnce sync.Once
	file_dtos_history_day_traffic_data_detection_point_lane_proto_rawDescData []byte
)

func file_dtos_history_day_traffic_data_detection_point_lane_proto_rawDescGZIP() []byte {
	file_dtos_history_day_traffic_data_detection_point_lane_proto_rawDescOnce.Do(func() {
		file_dtos_history_day_traffic_data_detection_point_lane_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dtos_history_day_traffic_data_detection_point_lane_proto_rawDesc), len(file_dtos_history_day_traffic_data_detection_point_lane_proto_rawDesc)))
	})
	return file_dtos_history_day_traffic_data_detection_point_lane_proto_rawDescData
}

var file_dtos_history_day_traffic_data_detection_point_lane_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_dtos_history_day_traffic_data_detection_point_lane_proto_goTypes = []any{
	(*HistoryDayTrafficDataByDetectionPointByLane)(nil), // 0: pb.HistoryDayTrafficDataByDetectionPointByLane
	(*timestamppb.Timestamp)(nil),                       // 1: google.protobuf.Timestamp
	(*TrafficFlowParametersByDay)(nil),                  // 2: pb.TrafficFlowParametersByDay
}
var file_dtos_history_day_traffic_data_detection_point_lane_proto_depIdxs = []int32{
	1,  // 0: pb.HistoryDayTrafficDataByDetectionPointByLane.created_at:type_name -> google.protobuf.Timestamp
	1,  // 1: pb.HistoryDayTrafficDataByDetectionPointByLane.modified_at:type_name -> google.protobuf.Timestamp
	1,  // 2: pb.HistoryDayTrafficDataByDetectionPointByLane.detection_timestamp:type_name -> google.protobuf.Timestamp
	2,  // 3: pb.HistoryDayTrafficDataByDetectionPointByLane.traffic_flow_parameters_vehicle_class_1:type_name -> pb.TrafficFlowParametersByDay
	2,  // 4: pb.HistoryDayTrafficDataByDetectionPointByLane.traffic_flow_parameters_vehicle_class_2:type_name -> pb.TrafficFlowParametersByDay
	2,  // 5: pb.HistoryDayTrafficDataByDetectionPointByLane.traffic_flow_parameters_vehicle_class_3:type_name -> pb.TrafficFlowParametersByDay
	2,  // 6: pb.HistoryDayTrafficDataByDetectionPointByLane.traffic_flow_parameters_vehicle_class_4:type_name -> pb.TrafficFlowParametersByDay
	2,  // 7: pb.HistoryDayTrafficDataByDetectionPointByLane.traffic_flow_parameters_vehicle_class_5:type_name -> pb.TrafficFlowParametersByDay
	2,  // 8: pb.HistoryDayTrafficDataByDetectionPointByLane.traffic_flow_parameters_vehicle_class_6:type_name -> pb.TrafficFlowParametersByDay
	2,  // 9: pb.HistoryDayTrafficDataByDetectionPointByLane.traffic_flow_parameters_vehicle_class_7:type_name -> pb.TrafficFlowParametersByDay
	2,  // 10: pb.HistoryDayTrafficDataByDetectionPointByLane.traffic_flow_parameters_vehicle_class_8:type_name -> pb.TrafficFlowParametersByDay
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_dtos_history_day_traffic_data_detection_point_lane_proto_init() }
func file_dtos_history_day_traffic_data_detection_point_lane_proto_init() {
	if File_dtos_history_day_traffic_data_detection_point_lane_proto != nil {
		return
	}
	file_dtos_traffic_flow_count_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dtos_history_day_traffic_data_detection_point_lane_proto_rawDesc), len(file_dtos_history_day_traffic_data_detection_point_lane_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dtos_history_day_traffic_data_detection_point_lane_proto_goTypes,
		DependencyIndexes: file_dtos_history_day_traffic_data_detection_point_lane_proto_depIdxs,
		MessageInfos:      file_dtos_history_day_traffic_data_detection_point_lane_proto_msgTypes,
	}.Build()
	File_dtos_history_day_traffic_data_detection_point_lane_proto = out.File
	file_dtos_history_day_traffic_data_detection_point_lane_proto_goTypes = nil
	file_dtos_history_day_traffic_data_detection_point_lane_proto_depIdxs = nil
}
