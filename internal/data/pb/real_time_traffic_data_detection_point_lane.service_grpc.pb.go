// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: services/real_time_traffic_data_detection_point_lane.service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_FullMethodName          = "/pb.RealTimeTrafficDataByDetectionPointByLaneService/ListRealTimeTrafficDataByDetectionPointByLane"
	RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_FullMethodName           = "/pb.RealTimeTrafficDataByDetectionPointByLaneService/GetRealTimeTrafficDataByDetectionPointByLane"
	RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_FullMethodName        = "/pb.RealTimeTrafficDataByDetectionPointByLaneService/CreateRealTimeTrafficDataByDetectionPointByLane"
	RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_FullMethodName        = "/pb.RealTimeTrafficDataByDetectionPointByLaneService/UpdateRealTimeTrafficDataByDetectionPointByLane"
	RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_FullMethodName        = "/pb.RealTimeTrafficDataByDetectionPointByLaneService/DeleteRealTimeTrafficDataByDetectionPointByLane"
	RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_FullMethodName    = "/pb.RealTimeTrafficDataByDetectionPointByLaneService/BulkCreateRealTimeTrafficDataByDetectionPointByLane"
	RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_FullMethodName = "/pb.RealTimeTrafficDataByDetectionPointByLaneService/GetRealTimeTrafficDataByDetectionPointByLaneStatistics"
	RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_FullMethodName     = "/pb.RealTimeTrafficDataByDetectionPointByLaneService/ListRealTimeTrafficDataByDetectionPointByLaneDaily"
	RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_FullMethodName      = "/pb.RealTimeTrafficDataByDetectionPointByLaneService/DownloadRealTimeTrafficDataByDetectionPointByLane"
)

// RealTimeTrafficDataByDetectionPointByLaneServiceClient is the client API for RealTimeTrafficDataByDetectionPointByLaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealTimeTrafficDataByDetectionPointByLaneServiceClient interface {
	ListRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *ListTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*ListRealTimeTrafficDataByDetectionPointByLaneResponse, error)
	GetRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *GetTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*GetRealTimeTrafficDataByDetectionPointByLaneResponse, error)
	CreateRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *CreateRealTimeTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*CreateRealTimeTrafficDataByDetectionPointByLaneResponse, error)
	UpdateRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *UpdateRealTimeTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*UpdateRealTimeTrafficDataByDetectionPointByLaneResponse, error)
	DeleteRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *DeleteTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkCreateRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *BulkCreateTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionPointByLaneResponse, error)
	GetRealTimeTrafficDataByDetectionPointByLaneStatistics(ctx context.Context, in *GetTrafficDataByDetectionPointByLaneStatisticsRequest, opts ...grpc.CallOption) (*GetTrafficDataByDetectionPointByLaneStatisticsResponse, error)
	ListRealTimeTrafficDataByDetectionPointByLaneDaily(ctx context.Context, in *ListTrafficDataByDetectionPointByLaneDailyRequest, opts ...grpc.CallOption) (*ListRealTimeTrafficDataByDetectionPointByLaneDailyResponse, error)
	DownloadRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *DownloadTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
}

type realTimeTrafficDataByDetectionPointByLaneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRealTimeTrafficDataByDetectionPointByLaneServiceClient(cc grpc.ClientConnInterface) RealTimeTrafficDataByDetectionPointByLaneServiceClient {
	return &realTimeTrafficDataByDetectionPointByLaneServiceClient{cc}
}

func (c *realTimeTrafficDataByDetectionPointByLaneServiceClient) ListRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *ListTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*ListRealTimeTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRealTimeTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionPointByLaneServiceClient) GetRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *GetTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*GetRealTimeTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRealTimeTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionPointByLaneServiceClient) CreateRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *CreateRealTimeTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*CreateRealTimeTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRealTimeTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionPointByLaneServiceClient) UpdateRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *UpdateRealTimeTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*UpdateRealTimeTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRealTimeTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionPointByLaneServiceClient) DeleteRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *DeleteTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionPointByLaneServiceClient) BulkCreateRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *BulkCreateTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionPointByLaneServiceClient) GetRealTimeTrafficDataByDetectionPointByLaneStatistics(ctx context.Context, in *GetTrafficDataByDetectionPointByLaneStatisticsRequest, opts ...grpc.CallOption) (*GetTrafficDataByDetectionPointByLaneStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrafficDataByDetectionPointByLaneStatisticsResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionPointByLaneServiceClient) ListRealTimeTrafficDataByDetectionPointByLaneDaily(ctx context.Context, in *ListTrafficDataByDetectionPointByLaneDailyRequest, opts ...grpc.CallOption) (*ListRealTimeTrafficDataByDetectionPointByLaneDailyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRealTimeTrafficDataByDetectionPointByLaneDailyResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionPointByLaneServiceClient) DownloadRealTimeTrafficDataByDetectionPointByLane(ctx context.Context, in *DownloadTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealTimeTrafficDataByDetectionPointByLaneServiceServer is the server API for RealTimeTrafficDataByDetectionPointByLaneService service.
// All implementations must embed UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer
// for forward compatibility.
type RealTimeTrafficDataByDetectionPointByLaneServiceServer interface {
	ListRealTimeTrafficDataByDetectionPointByLane(context.Context, *ListTrafficDataByDetectionPointByLaneRequest) (*ListRealTimeTrafficDataByDetectionPointByLaneResponse, error)
	GetRealTimeTrafficDataByDetectionPointByLane(context.Context, *GetTrafficDataByDetectionPointByLaneRequest) (*GetRealTimeTrafficDataByDetectionPointByLaneResponse, error)
	CreateRealTimeTrafficDataByDetectionPointByLane(context.Context, *CreateRealTimeTrafficDataByDetectionPointByLaneRequest) (*CreateRealTimeTrafficDataByDetectionPointByLaneResponse, error)
	UpdateRealTimeTrafficDataByDetectionPointByLane(context.Context, *UpdateRealTimeTrafficDataByDetectionPointByLaneRequest) (*UpdateRealTimeTrafficDataByDetectionPointByLaneResponse, error)
	DeleteRealTimeTrafficDataByDetectionPointByLane(context.Context, *DeleteTrafficDataByDetectionPointByLaneRequest) (*emptypb.Empty, error)
	BulkCreateRealTimeTrafficDataByDetectionPointByLane(context.Context, *BulkCreateTrafficDataByDetectionPointByLaneRequest) (*BulkCreateTrafficDataByDetectionPointByLaneResponse, error)
	GetRealTimeTrafficDataByDetectionPointByLaneStatistics(context.Context, *GetTrafficDataByDetectionPointByLaneStatisticsRequest) (*GetTrafficDataByDetectionPointByLaneStatisticsResponse, error)
	ListRealTimeTrafficDataByDetectionPointByLaneDaily(context.Context, *ListTrafficDataByDetectionPointByLaneDailyRequest) (*ListRealTimeTrafficDataByDetectionPointByLaneDailyResponse, error)
	DownloadRealTimeTrafficDataByDetectionPointByLane(context.Context, *DownloadTrafficDataByDetectionPointByLaneRequest) (*DownloadResponse, error)
	mustEmbedUnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer()
}

// UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer struct{}

func (UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer) ListRealTimeTrafficDataByDetectionPointByLane(context.Context, *ListTrafficDataByDetectionPointByLaneRequest) (*ListRealTimeTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRealTimeTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer) GetRealTimeTrafficDataByDetectionPointByLane(context.Context, *GetTrafficDataByDetectionPointByLaneRequest) (*GetRealTimeTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealTimeTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer) CreateRealTimeTrafficDataByDetectionPointByLane(context.Context, *CreateRealTimeTrafficDataByDetectionPointByLaneRequest) (*CreateRealTimeTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRealTimeTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer) UpdateRealTimeTrafficDataByDetectionPointByLane(context.Context, *UpdateRealTimeTrafficDataByDetectionPointByLaneRequest) (*UpdateRealTimeTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRealTimeTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer) DeleteRealTimeTrafficDataByDetectionPointByLane(context.Context, *DeleteTrafficDataByDetectionPointByLaneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRealTimeTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer) BulkCreateRealTimeTrafficDataByDetectionPointByLane(context.Context, *BulkCreateTrafficDataByDetectionPointByLaneRequest) (*BulkCreateTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateRealTimeTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer) GetRealTimeTrafficDataByDetectionPointByLaneStatistics(context.Context, *GetTrafficDataByDetectionPointByLaneStatisticsRequest) (*GetTrafficDataByDetectionPointByLaneStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealTimeTrafficDataByDetectionPointByLaneStatistics not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer) ListRealTimeTrafficDataByDetectionPointByLaneDaily(context.Context, *ListTrafficDataByDetectionPointByLaneDailyRequest) (*ListRealTimeTrafficDataByDetectionPointByLaneDailyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRealTimeTrafficDataByDetectionPointByLaneDaily not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer) DownloadRealTimeTrafficDataByDetectionPointByLane(context.Context, *DownloadTrafficDataByDetectionPointByLaneRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadRealTimeTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer) mustEmbedUnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer() {
}
func (UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer) testEmbeddedByValue() {}

// UnsafeRealTimeTrafficDataByDetectionPointByLaneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealTimeTrafficDataByDetectionPointByLaneServiceServer will
// result in compilation errors.
type UnsafeRealTimeTrafficDataByDetectionPointByLaneServiceServer interface {
	mustEmbedUnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer()
}

func RegisterRealTimeTrafficDataByDetectionPointByLaneServiceServer(s grpc.ServiceRegistrar, srv RealTimeTrafficDataByDetectionPointByLaneServiceServer) {
	// If the following call pancis, it indicates UnimplementedRealTimeTrafficDataByDetectionPointByLaneServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RealTimeTrafficDataByDetectionPointByLaneService_ServiceDesc, srv)
}

func _RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).ListRealTimeTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).ListRealTimeTrafficDataByDetectionPointByLane(ctx, req.(*ListTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).GetRealTimeTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).GetRealTimeTrafficDataByDetectionPointByLane(ctx, req.(*GetTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRealTimeTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).CreateRealTimeTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).CreateRealTimeTrafficDataByDetectionPointByLane(ctx, req.(*CreateRealTimeTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRealTimeTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).UpdateRealTimeTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).UpdateRealTimeTrafficDataByDetectionPointByLane(ctx, req.(*UpdateRealTimeTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).DeleteRealTimeTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).DeleteRealTimeTrafficDataByDetectionPointByLane(ctx, req.(*DeleteTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).BulkCreateRealTimeTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).BulkCreateRealTimeTrafficDataByDetectionPointByLane(ctx, req.(*BulkCreateTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionPointByLaneStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).GetRealTimeTrafficDataByDetectionPointByLaneStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).GetRealTimeTrafficDataByDetectionPointByLaneStatistics(ctx, req.(*GetTrafficDataByDetectionPointByLaneStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionPointByLaneDailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).ListRealTimeTrafficDataByDetectionPointByLaneDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).ListRealTimeTrafficDataByDetectionPointByLaneDaily(ctx, req.(*ListTrafficDataByDetectionPointByLaneDailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).DownloadRealTimeTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionPointByLaneServiceServer).DownloadRealTimeTrafficDataByDetectionPointByLane(ctx, req.(*DownloadTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RealTimeTrafficDataByDetectionPointByLaneService_ServiceDesc is the grpc.ServiceDesc for RealTimeTrafficDataByDetectionPointByLaneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RealTimeTrafficDataByDetectionPointByLaneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RealTimeTrafficDataByDetectionPointByLaneService",
	HandlerType: (*RealTimeTrafficDataByDetectionPointByLaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRealTimeTrafficDataByDetectionPointByLane",
			Handler:    _RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "GetRealTimeTrafficDataByDetectionPointByLane",
			Handler:    _RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "CreateRealTimeTrafficDataByDetectionPointByLane",
			Handler:    _RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "UpdateRealTimeTrafficDataByDetectionPointByLane",
			Handler:    _RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "DeleteRealTimeTrafficDataByDetectionPointByLane",
			Handler:    _RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "BulkCreateRealTimeTrafficDataByDetectionPointByLane",
			Handler:    _RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "GetRealTimeTrafficDataByDetectionPointByLaneStatistics",
			Handler:    _RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_Handler,
		},
		{
			MethodName: "ListRealTimeTrafficDataByDetectionPointByLaneDaily",
			Handler:    _RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_Handler,
		},
		{
			MethodName: "DownloadRealTimeTrafficDataByDetectionPointByLane",
			Handler:    _RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/real_time_traffic_data_detection_point_lane.service.proto",
}
