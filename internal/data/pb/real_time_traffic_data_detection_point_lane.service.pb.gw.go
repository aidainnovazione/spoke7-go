// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: services/real_time_traffic_data_detection_point_lane.service.proto

/*
Package pb is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package pb

import (
	"context"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join

var (
	filter_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client RealTimeTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server RealTimeTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client RealTimeTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server RealTimeTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

func request_RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client RealTimeTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateRealTimeTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server RealTimeTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateRealTimeTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

func request_RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client RealTimeTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateRealTimeTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server RealTimeTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateRealTimeTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client RealTimeTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DeleteRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server RealTimeTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DeleteRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

func request_RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client RealTimeTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BulkCreateTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.BulkCreateRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server RealTimeTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BulkCreateTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.BulkCreateRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0(ctx context.Context, marshaler runtime.Marshaler, client RealTimeTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointByLaneStatisticsRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetRealTimeTrafficDataByDetectionPointByLaneStatistics(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0(ctx context.Context, marshaler runtime.Marshaler, server RealTimeTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointByLaneStatisticsRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetRealTimeTrafficDataByDetectionPointByLaneStatistics(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0(ctx context.Context, marshaler runtime.Marshaler, client RealTimeTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointByLaneDailyRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListRealTimeTrafficDataByDetectionPointByLaneDaily(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0(ctx context.Context, marshaler runtime.Marshaler, server RealTimeTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointByLaneDailyRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListRealTimeTrafficDataByDetectionPointByLaneDaily(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client RealTimeTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DownloadTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DownloadRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server RealTimeTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DownloadTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DownloadRealTimeTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

// RegisterRealTimeTrafficDataByDetectionPointByLaneServiceHandlerServer registers the http handlers for service RealTimeTrafficDataByDetectionPointByLaneService to "mux".
// UnaryRPC     :call RealTimeTrafficDataByDetectionPointByLaneServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterRealTimeTrafficDataByDetectionPointByLaneServiceHandlerFromEndpoint instead.
func RegisterRealTimeTrafficDataByDetectionPointByLaneServiceHandlerServer(ctx context.Context, mux *runtime.ServeMux, server RealTimeTrafficDataByDetectionPointByLaneServiceServer) error {

	mux.Handle("GET", pattern_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/ListRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane/list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/GetRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane/single"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/CreateRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/UpdateRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/DeleteRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/BulkCreateRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane/bulk"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/GetRealTimeTrafficDataByDetectionPointByLaneStatistics", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane/statistics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/ListRealTimeTrafficDataByDetectionPointByLaneDaily", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane/daily"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/DownloadRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane/download"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterRealTimeTrafficDataByDetectionPointByLaneServiceHandlerFromEndpoint is same as RegisterRealTimeTrafficDataByDetectionPointByLaneServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterRealTimeTrafficDataByDetectionPointByLaneServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterRealTimeTrafficDataByDetectionPointByLaneServiceHandler(ctx, mux, conn)
}

// RegisterRealTimeTrafficDataByDetectionPointByLaneServiceHandler registers the http handlers for service RealTimeTrafficDataByDetectionPointByLaneService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterRealTimeTrafficDataByDetectionPointByLaneServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterRealTimeTrafficDataByDetectionPointByLaneServiceHandlerClient(ctx, mux, NewRealTimeTrafficDataByDetectionPointByLaneServiceClient(conn))
}

// RegisterRealTimeTrafficDataByDetectionPointByLaneServiceHandlerClient registers the http handlers for service RealTimeTrafficDataByDetectionPointByLaneService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "RealTimeTrafficDataByDetectionPointByLaneServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "RealTimeTrafficDataByDetectionPointByLaneServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "RealTimeTrafficDataByDetectionPointByLaneServiceClient" to call the correct interceptors.
func RegisterRealTimeTrafficDataByDetectionPointByLaneServiceHandlerClient(ctx context.Context, mux *runtime.ServeMux, client RealTimeTrafficDataByDetectionPointByLaneServiceClient) error {

	mux.Handle("GET", pattern_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/ListRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane/list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/GetRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane/single"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/CreateRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/UpdateRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/DeleteRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/BulkCreateRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane/bulk"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/GetRealTimeTrafficDataByDetectionPointByLaneStatistics", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane/statistics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/ListRealTimeTrafficDataByDetectionPointByLaneDaily", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane/daily"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.RealTimeTrafficDataByDetectionPointByLaneService/DownloadRealTimeTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/real_time/detection_point/lane/download"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "real_time", "detection_point", "lane", "list"}, ""))

	pattern_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "real_time", "detection_point", "lane", "single"}, ""))

	pattern_RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "real_time", "detection_point", "lane"}, ""))

	pattern_RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "real_time", "detection_point", "lane"}, ""))

	pattern_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "real_time", "detection_point", "lane"}, ""))

	pattern_RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "real_time", "detection_point", "lane", "bulk"}, ""))

	pattern_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "real_time", "detection_point", "lane", "statistics"}, ""))

	pattern_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "real_time", "detection_point", "lane", "daily"}, ""))

	pattern_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "real_time", "detection_point", "lane", "download"}, ""))
)

var (
	forward_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage

	forward_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage

	forward_RealTimeTrafficDataByDetectionPointByLaneService_CreateRealTimeTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage

	forward_RealTimeTrafficDataByDetectionPointByLaneService_UpdateRealTimeTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage

	forward_RealTimeTrafficDataByDetectionPointByLaneService_DeleteRealTimeTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage

	forward_RealTimeTrafficDataByDetectionPointByLaneService_BulkCreateRealTimeTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage

	forward_RealTimeTrafficDataByDetectionPointByLaneService_GetRealTimeTrafficDataByDetectionPointByLaneStatistics_0 = runtime.ForwardResponseMessage

	forward_RealTimeTrafficDataByDetectionPointByLaneService_ListRealTimeTrafficDataByDetectionPointByLaneDaily_0 = runtime.ForwardResponseMessage

	forward_RealTimeTrafficDataByDetectionPointByLaneService_DownloadRealTimeTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage
)
