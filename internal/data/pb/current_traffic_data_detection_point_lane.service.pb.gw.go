// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: services/current_traffic_data_detection_point_lane.service.proto

/*
Package pb is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package pb

import (
	"context"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join

var (
	filter_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

func request_CurrentTrafficDataByDetectionPointByLaneService_CreateCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateCurrentTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointByLaneService_CreateCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateCurrentTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

func request_CurrentTrafficDataByDetectionPointByLaneService_UpdateCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateCurrentTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointByLaneService_UpdateCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateCurrentTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DeleteCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DeleteCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

func request_CurrentTrafficDataByDetectionPointByLaneService_BulkCreateCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BulkCreateTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.BulkCreateCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointByLaneService_BulkCreateCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BulkCreateTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.BulkCreateCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointByLaneStatisticsRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetCurrentTrafficDataByDetectionPointByLaneStatistics(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointByLaneStatisticsRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetCurrentTrafficDataByDetectionPointByLaneStatistics(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointByLaneAggregateRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetCurrentTrafficDataByDetectionPointByLaneAggregate(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointByLaneAggregateRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetCurrentTrafficDataByDetectionPointByLaneAggregate(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointByLaneDailyRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListCurrentTrafficDataByDetectionPointByLaneDaily(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointByLaneDailyRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListCurrentTrafficDataByDetectionPointByLaneDaily(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointByLaneServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DownloadTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DownloadCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointByLaneServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DownloadTrafficDataByDetectionPointByLaneRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DownloadCurrentTrafficDataByDetectionPointByLane(ctx, &protoReq)
	return msg, metadata, err

}

// RegisterCurrentTrafficDataByDetectionPointByLaneServiceHandlerServer registers the http handlers for service CurrentTrafficDataByDetectionPointByLaneService to "mux".
// UnaryRPC     :call CurrentTrafficDataByDetectionPointByLaneServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterCurrentTrafficDataByDetectionPointByLaneServiceHandlerFromEndpoint instead.
func RegisterCurrentTrafficDataByDetectionPointByLaneServiceHandlerServer(ctx context.Context, mux *runtime.ServeMux, server CurrentTrafficDataByDetectionPointByLaneServiceServer) error {

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/ListCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/GetCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/single"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CurrentTrafficDataByDetectionPointByLaneService_CreateCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/CreateCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointByLaneService_CreateCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_CreateCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_CurrentTrafficDataByDetectionPointByLaneService_UpdateCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/UpdateCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointByLaneService_UpdateCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_UpdateCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/DeleteCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CurrentTrafficDataByDetectionPointByLaneService_BulkCreateCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/BulkCreateCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/bulk"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointByLaneService_BulkCreateCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_BulkCreateCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/GetCurrentTrafficDataByDetectionPointByLaneStatistics", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/statistics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/GetCurrentTrafficDataByDetectionPointByLaneAggregate", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/aggregate"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/ListCurrentTrafficDataByDetectionPointByLaneDaily", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/daily"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/DownloadCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/download"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterCurrentTrafficDataByDetectionPointByLaneServiceHandlerFromEndpoint is same as RegisterCurrentTrafficDataByDetectionPointByLaneServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterCurrentTrafficDataByDetectionPointByLaneServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterCurrentTrafficDataByDetectionPointByLaneServiceHandler(ctx, mux, conn)
}

// RegisterCurrentTrafficDataByDetectionPointByLaneServiceHandler registers the http handlers for service CurrentTrafficDataByDetectionPointByLaneService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterCurrentTrafficDataByDetectionPointByLaneServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterCurrentTrafficDataByDetectionPointByLaneServiceHandlerClient(ctx, mux, NewCurrentTrafficDataByDetectionPointByLaneServiceClient(conn))
}

// RegisterCurrentTrafficDataByDetectionPointByLaneServiceHandlerClient registers the http handlers for service CurrentTrafficDataByDetectionPointByLaneService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "CurrentTrafficDataByDetectionPointByLaneServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "CurrentTrafficDataByDetectionPointByLaneServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "CurrentTrafficDataByDetectionPointByLaneServiceClient" to call the correct interceptors.
func RegisterCurrentTrafficDataByDetectionPointByLaneServiceHandlerClient(ctx context.Context, mux *runtime.ServeMux, client CurrentTrafficDataByDetectionPointByLaneServiceClient) error {

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/ListCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/GetCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/single"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CurrentTrafficDataByDetectionPointByLaneService_CreateCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/CreateCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointByLaneService_CreateCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_CreateCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_CurrentTrafficDataByDetectionPointByLaneService_UpdateCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/UpdateCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointByLaneService_UpdateCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_UpdateCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/DeleteCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CurrentTrafficDataByDetectionPointByLaneService_BulkCreateCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/BulkCreateCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/bulk"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointByLaneService_BulkCreateCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_BulkCreateCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/GetCurrentTrafficDataByDetectionPointByLaneStatistics", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/statistics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/GetCurrentTrafficDataByDetectionPointByLaneAggregate", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/aggregate"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/ListCurrentTrafficDataByDetectionPointByLaneDaily", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/daily"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointByLaneService/DownloadCurrentTrafficDataByDetectionPointByLane", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/lane/download"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "current", "detection_point", "lane", "list"}, ""))

	pattern_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "current", "detection_point", "lane", "single"}, ""))

	pattern_CurrentTrafficDataByDetectionPointByLaneService_CreateCurrentTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_point", "lane"}, ""))

	pattern_CurrentTrafficDataByDetectionPointByLaneService_UpdateCurrentTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_point", "lane"}, ""))

	pattern_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_point", "lane"}, ""))

	pattern_CurrentTrafficDataByDetectionPointByLaneService_BulkCreateCurrentTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "current", "detection_point", "lane", "bulk"}, ""))

	pattern_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "current", "detection_point", "lane", "statistics"}, ""))

	pattern_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "current", "detection_point", "lane", "aggregate"}, ""))

	pattern_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "current", "detection_point", "lane", "daily"}, ""))

	pattern_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6}, []string{"api", "v1", "traffic", "current", "detection_point", "lane", "download"}, ""))
)

var (
	forward_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointByLaneService_CreateCurrentTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointByLaneService_UpdateCurrentTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointByLaneService_DeleteCurrentTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointByLaneService_BulkCreateCurrentTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneStatistics_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointByLaneService_GetCurrentTrafficDataByDetectionPointByLaneAggregate_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointByLaneService_ListCurrentTrafficDataByDetectionPointByLaneDaily_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointByLaneService_DownloadCurrentTrafficDataByDetectionPointByLane_0 = runtime.ForwardResponseMessage
)
