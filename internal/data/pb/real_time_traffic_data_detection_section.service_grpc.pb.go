// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: services/real_time_traffic_data_detection_section.service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RealTimeTrafficDataByDetectionSectionService_ListRealTimeTrafficDataByDetectionSections_FullMethodName         = "/pb.RealTimeTrafficDataByDetectionSectionService/ListRealTimeTrafficDataByDetectionSections"
	RealTimeTrafficDataByDetectionSectionService_GetRealTimeTrafficDataByDetectionSection_FullMethodName           = "/pb.RealTimeTrafficDataByDetectionSectionService/GetRealTimeTrafficDataByDetectionSection"
	RealTimeTrafficDataByDetectionSectionService_CreateRealTimeTrafficDataByDetectionSection_FullMethodName        = "/pb.RealTimeTrafficDataByDetectionSectionService/CreateRealTimeTrafficDataByDetectionSection"
	RealTimeTrafficDataByDetectionSectionService_UpdateRealTimeTrafficDataByDetectionSection_FullMethodName        = "/pb.RealTimeTrafficDataByDetectionSectionService/UpdateRealTimeTrafficDataByDetectionSection"
	RealTimeTrafficDataByDetectionSectionService_DeleteRealTimeTrafficDataByDetectionSection_FullMethodName        = "/pb.RealTimeTrafficDataByDetectionSectionService/DeleteRealTimeTrafficDataByDetectionSection"
	RealTimeTrafficDataByDetectionSectionService_BulkCreateRealTimeTrafficDataByDetectionSection_FullMethodName    = "/pb.RealTimeTrafficDataByDetectionSectionService/BulkCreateRealTimeTrafficDataByDetectionSection"
	RealTimeTrafficDataByDetectionSectionService_GetRealTimeTrafficDataByDetectionSectionStatistics_FullMethodName = "/pb.RealTimeTrafficDataByDetectionSectionService/GetRealTimeTrafficDataByDetectionSectionStatistics"
	RealTimeTrafficDataByDetectionSectionService_ListRealTimeTrafficDataByDetectionSectionDaily_FullMethodName     = "/pb.RealTimeTrafficDataByDetectionSectionService/ListRealTimeTrafficDataByDetectionSectionDaily"
	RealTimeTrafficDataByDetectionSectionService_DownloadRealTimeTrafficDataByDetectionSection_FullMethodName      = "/pb.RealTimeTrafficDataByDetectionSectionService/DownloadRealTimeTrafficDataByDetectionSection"
)

// RealTimeTrafficDataByDetectionSectionServiceClient is the client API for RealTimeTrafficDataByDetectionSectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealTimeTrafficDataByDetectionSectionServiceClient interface {
	ListRealTimeTrafficDataByDetectionSections(ctx context.Context, in *ListTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*ListRealTimeTrafficDataByDetectionSectionsResponse, error)
	GetRealTimeTrafficDataByDetectionSection(ctx context.Context, in *GetTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*GetRealTimeTrafficDataByDetectionSectionsResponse, error)
	CreateRealTimeTrafficDataByDetectionSection(ctx context.Context, in *CreateRealTimeTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*CreateRealTimeTrafficDataByDetectionSectionResponse, error)
	UpdateRealTimeTrafficDataByDetectionSection(ctx context.Context, in *UpdateRealTimeTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*UpdateRealTimeTrafficDataByDetectionSectionResponse, error)
	DeleteRealTimeTrafficDataByDetectionSection(ctx context.Context, in *DeleteTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkCreateRealTimeTrafficDataByDetectionSection(ctx context.Context, in *BulkCreateTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionSectionResponse, error)
	GetRealTimeTrafficDataByDetectionSectionStatistics(ctx context.Context, in *GetTrafficDataByDetectionSectionStatisticsRequest, opts ...grpc.CallOption) (*GetTrafficDataByDetectionSectionStatisticsResponse, error)
	ListRealTimeTrafficDataByDetectionSectionDaily(ctx context.Context, in *ListTrafficDataByDetectionSectionDailyRequest, opts ...grpc.CallOption) (*ListRealTimeTrafficDataByDetectionSectionDailyResponse, error)
	DownloadRealTimeTrafficDataByDetectionSection(ctx context.Context, in *DownloadTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
}

type realTimeTrafficDataByDetectionSectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRealTimeTrafficDataByDetectionSectionServiceClient(cc grpc.ClientConnInterface) RealTimeTrafficDataByDetectionSectionServiceClient {
	return &realTimeTrafficDataByDetectionSectionServiceClient{cc}
}

func (c *realTimeTrafficDataByDetectionSectionServiceClient) ListRealTimeTrafficDataByDetectionSections(ctx context.Context, in *ListTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*ListRealTimeTrafficDataByDetectionSectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRealTimeTrafficDataByDetectionSectionsResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionSectionService_ListRealTimeTrafficDataByDetectionSections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionSectionServiceClient) GetRealTimeTrafficDataByDetectionSection(ctx context.Context, in *GetTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*GetRealTimeTrafficDataByDetectionSectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRealTimeTrafficDataByDetectionSectionsResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionSectionService_GetRealTimeTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionSectionServiceClient) CreateRealTimeTrafficDataByDetectionSection(ctx context.Context, in *CreateRealTimeTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*CreateRealTimeTrafficDataByDetectionSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRealTimeTrafficDataByDetectionSectionResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionSectionService_CreateRealTimeTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionSectionServiceClient) UpdateRealTimeTrafficDataByDetectionSection(ctx context.Context, in *UpdateRealTimeTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*UpdateRealTimeTrafficDataByDetectionSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRealTimeTrafficDataByDetectionSectionResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionSectionService_UpdateRealTimeTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionSectionServiceClient) DeleteRealTimeTrafficDataByDetectionSection(ctx context.Context, in *DeleteTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionSectionService_DeleteRealTimeTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionSectionServiceClient) BulkCreateRealTimeTrafficDataByDetectionSection(ctx context.Context, in *BulkCreateTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateTrafficDataByDetectionSectionResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionSectionService_BulkCreateRealTimeTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionSectionServiceClient) GetRealTimeTrafficDataByDetectionSectionStatistics(ctx context.Context, in *GetTrafficDataByDetectionSectionStatisticsRequest, opts ...grpc.CallOption) (*GetTrafficDataByDetectionSectionStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrafficDataByDetectionSectionStatisticsResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionSectionService_GetRealTimeTrafficDataByDetectionSectionStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionSectionServiceClient) ListRealTimeTrafficDataByDetectionSectionDaily(ctx context.Context, in *ListTrafficDataByDetectionSectionDailyRequest, opts ...grpc.CallOption) (*ListRealTimeTrafficDataByDetectionSectionDailyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRealTimeTrafficDataByDetectionSectionDailyResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionSectionService_ListRealTimeTrafficDataByDetectionSectionDaily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realTimeTrafficDataByDetectionSectionServiceClient) DownloadRealTimeTrafficDataByDetectionSection(ctx context.Context, in *DownloadTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, RealTimeTrafficDataByDetectionSectionService_DownloadRealTimeTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealTimeTrafficDataByDetectionSectionServiceServer is the server API for RealTimeTrafficDataByDetectionSectionService service.
// All implementations must embed UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer
// for forward compatibility.
type RealTimeTrafficDataByDetectionSectionServiceServer interface {
	ListRealTimeTrafficDataByDetectionSections(context.Context, *ListTrafficDataByDetectionSectionRequest) (*ListRealTimeTrafficDataByDetectionSectionsResponse, error)
	GetRealTimeTrafficDataByDetectionSection(context.Context, *GetTrafficDataByDetectionSectionRequest) (*GetRealTimeTrafficDataByDetectionSectionsResponse, error)
	CreateRealTimeTrafficDataByDetectionSection(context.Context, *CreateRealTimeTrafficDataByDetectionSectionRequest) (*CreateRealTimeTrafficDataByDetectionSectionResponse, error)
	UpdateRealTimeTrafficDataByDetectionSection(context.Context, *UpdateRealTimeTrafficDataByDetectionSectionRequest) (*UpdateRealTimeTrafficDataByDetectionSectionResponse, error)
	DeleteRealTimeTrafficDataByDetectionSection(context.Context, *DeleteTrafficDataByDetectionSectionRequest) (*emptypb.Empty, error)
	BulkCreateRealTimeTrafficDataByDetectionSection(context.Context, *BulkCreateTrafficDataByDetectionSectionRequest) (*BulkCreateTrafficDataByDetectionSectionResponse, error)
	GetRealTimeTrafficDataByDetectionSectionStatistics(context.Context, *GetTrafficDataByDetectionSectionStatisticsRequest) (*GetTrafficDataByDetectionSectionStatisticsResponse, error)
	ListRealTimeTrafficDataByDetectionSectionDaily(context.Context, *ListTrafficDataByDetectionSectionDailyRequest) (*ListRealTimeTrafficDataByDetectionSectionDailyResponse, error)
	DownloadRealTimeTrafficDataByDetectionSection(context.Context, *DownloadTrafficDataByDetectionSectionRequest) (*DownloadResponse, error)
	mustEmbedUnimplementedRealTimeTrafficDataByDetectionSectionServiceServer()
}

// UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer struct{}

func (UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer) ListRealTimeTrafficDataByDetectionSections(context.Context, *ListTrafficDataByDetectionSectionRequest) (*ListRealTimeTrafficDataByDetectionSectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRealTimeTrafficDataByDetectionSections not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer) GetRealTimeTrafficDataByDetectionSection(context.Context, *GetTrafficDataByDetectionSectionRequest) (*GetRealTimeTrafficDataByDetectionSectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealTimeTrafficDataByDetectionSection not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer) CreateRealTimeTrafficDataByDetectionSection(context.Context, *CreateRealTimeTrafficDataByDetectionSectionRequest) (*CreateRealTimeTrafficDataByDetectionSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRealTimeTrafficDataByDetectionSection not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer) UpdateRealTimeTrafficDataByDetectionSection(context.Context, *UpdateRealTimeTrafficDataByDetectionSectionRequest) (*UpdateRealTimeTrafficDataByDetectionSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRealTimeTrafficDataByDetectionSection not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer) DeleteRealTimeTrafficDataByDetectionSection(context.Context, *DeleteTrafficDataByDetectionSectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRealTimeTrafficDataByDetectionSection not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer) BulkCreateRealTimeTrafficDataByDetectionSection(context.Context, *BulkCreateTrafficDataByDetectionSectionRequest) (*BulkCreateTrafficDataByDetectionSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateRealTimeTrafficDataByDetectionSection not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer) GetRealTimeTrafficDataByDetectionSectionStatistics(context.Context, *GetTrafficDataByDetectionSectionStatisticsRequest) (*GetTrafficDataByDetectionSectionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealTimeTrafficDataByDetectionSectionStatistics not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer) ListRealTimeTrafficDataByDetectionSectionDaily(context.Context, *ListTrafficDataByDetectionSectionDailyRequest) (*ListRealTimeTrafficDataByDetectionSectionDailyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRealTimeTrafficDataByDetectionSectionDaily not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer) DownloadRealTimeTrafficDataByDetectionSection(context.Context, *DownloadTrafficDataByDetectionSectionRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadRealTimeTrafficDataByDetectionSection not implemented")
}
func (UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer) mustEmbedUnimplementedRealTimeTrafficDataByDetectionSectionServiceServer() {
}
func (UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer) testEmbeddedByValue() {}

// UnsafeRealTimeTrafficDataByDetectionSectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealTimeTrafficDataByDetectionSectionServiceServer will
// result in compilation errors.
type UnsafeRealTimeTrafficDataByDetectionSectionServiceServer interface {
	mustEmbedUnimplementedRealTimeTrafficDataByDetectionSectionServiceServer()
}

func RegisterRealTimeTrafficDataByDetectionSectionServiceServer(s grpc.ServiceRegistrar, srv RealTimeTrafficDataByDetectionSectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedRealTimeTrafficDataByDetectionSectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RealTimeTrafficDataByDetectionSectionService_ServiceDesc, srv)
}

func _RealTimeTrafficDataByDetectionSectionService_ListRealTimeTrafficDataByDetectionSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).ListRealTimeTrafficDataByDetectionSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionSectionService_ListRealTimeTrafficDataByDetectionSections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).ListRealTimeTrafficDataByDetectionSections(ctx, req.(*ListTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionSectionService_GetRealTimeTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).GetRealTimeTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionSectionService_GetRealTimeTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).GetRealTimeTrafficDataByDetectionSection(ctx, req.(*GetTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionSectionService_CreateRealTimeTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRealTimeTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).CreateRealTimeTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionSectionService_CreateRealTimeTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).CreateRealTimeTrafficDataByDetectionSection(ctx, req.(*CreateRealTimeTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionSectionService_UpdateRealTimeTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRealTimeTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).UpdateRealTimeTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionSectionService_UpdateRealTimeTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).UpdateRealTimeTrafficDataByDetectionSection(ctx, req.(*UpdateRealTimeTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionSectionService_DeleteRealTimeTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).DeleteRealTimeTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionSectionService_DeleteRealTimeTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).DeleteRealTimeTrafficDataByDetectionSection(ctx, req.(*DeleteTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionSectionService_BulkCreateRealTimeTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).BulkCreateRealTimeTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionSectionService_BulkCreateRealTimeTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).BulkCreateRealTimeTrafficDataByDetectionSection(ctx, req.(*BulkCreateTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionSectionService_GetRealTimeTrafficDataByDetectionSectionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionSectionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).GetRealTimeTrafficDataByDetectionSectionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionSectionService_GetRealTimeTrafficDataByDetectionSectionStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).GetRealTimeTrafficDataByDetectionSectionStatistics(ctx, req.(*GetTrafficDataByDetectionSectionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionSectionService_ListRealTimeTrafficDataByDetectionSectionDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionSectionDailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).ListRealTimeTrafficDataByDetectionSectionDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionSectionService_ListRealTimeTrafficDataByDetectionSectionDaily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).ListRealTimeTrafficDataByDetectionSectionDaily(ctx, req.(*ListTrafficDataByDetectionSectionDailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealTimeTrafficDataByDetectionSectionService_DownloadRealTimeTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).DownloadRealTimeTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealTimeTrafficDataByDetectionSectionService_DownloadRealTimeTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealTimeTrafficDataByDetectionSectionServiceServer).DownloadRealTimeTrafficDataByDetectionSection(ctx, req.(*DownloadTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RealTimeTrafficDataByDetectionSectionService_ServiceDesc is the grpc.ServiceDesc for RealTimeTrafficDataByDetectionSectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RealTimeTrafficDataByDetectionSectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RealTimeTrafficDataByDetectionSectionService",
	HandlerType: (*RealTimeTrafficDataByDetectionSectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRealTimeTrafficDataByDetectionSections",
			Handler:    _RealTimeTrafficDataByDetectionSectionService_ListRealTimeTrafficDataByDetectionSections_Handler,
		},
		{
			MethodName: "GetRealTimeTrafficDataByDetectionSection",
			Handler:    _RealTimeTrafficDataByDetectionSectionService_GetRealTimeTrafficDataByDetectionSection_Handler,
		},
		{
			MethodName: "CreateRealTimeTrafficDataByDetectionSection",
			Handler:    _RealTimeTrafficDataByDetectionSectionService_CreateRealTimeTrafficDataByDetectionSection_Handler,
		},
		{
			MethodName: "UpdateRealTimeTrafficDataByDetectionSection",
			Handler:    _RealTimeTrafficDataByDetectionSectionService_UpdateRealTimeTrafficDataByDetectionSection_Handler,
		},
		{
			MethodName: "DeleteRealTimeTrafficDataByDetectionSection",
			Handler:    _RealTimeTrafficDataByDetectionSectionService_DeleteRealTimeTrafficDataByDetectionSection_Handler,
		},
		{
			MethodName: "BulkCreateRealTimeTrafficDataByDetectionSection",
			Handler:    _RealTimeTrafficDataByDetectionSectionService_BulkCreateRealTimeTrafficDataByDetectionSection_Handler,
		},
		{
			MethodName: "GetRealTimeTrafficDataByDetectionSectionStatistics",
			Handler:    _RealTimeTrafficDataByDetectionSectionService_GetRealTimeTrafficDataByDetectionSectionStatistics_Handler,
		},
		{
			MethodName: "ListRealTimeTrafficDataByDetectionSectionDaily",
			Handler:    _RealTimeTrafficDataByDetectionSectionService_ListRealTimeTrafficDataByDetectionSectionDaily_Handler,
		},
		{
			MethodName: "DownloadRealTimeTrafficDataByDetectionSection",
			Handler:    _RealTimeTrafficDataByDetectionSectionService_DownloadRealTimeTrafficDataByDetectionSection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/real_time_traffic_data_detection_section.service.proto",
}
