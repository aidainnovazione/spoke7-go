// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: services/history_day_traffic_data_detection_point.service.proto

/*
Package pb is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package pb

import (
	"context"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join

var (
	filter_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryDayTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryDayTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryDayTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryDayTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

func request_HistoryDayTrafficDataByDetectionPointService_CreateHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryDayTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateHistoryDayTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryDayTrafficDataByDetectionPointService_CreateHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryDayTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateHistoryDayTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

func request_HistoryDayTrafficDataByDetectionPointService_UpdateHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryDayTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateHistoryDayTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryDayTrafficDataByDetectionPointService_UpdateHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryDayTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateHistoryDayTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryDayTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DeleteHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryDayTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DeleteHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

func request_HistoryDayTrafficDataByDetectionPointService_BulkCreateHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryDayTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BulkCreateTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.BulkCreateHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryDayTrafficDataByDetectionPointService_BulkCreateHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryDayTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BulkCreateTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.BulkCreateHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryDayTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointStatisticsRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetHistoryDayTrafficDataByDetectionPointStatistics(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryDayTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointStatisticsRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetHistoryDayTrafficDataByDetectionPointStatistics(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryDayTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointDailyRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListHistoryDayTrafficDataByDetectionPointDaily(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryDayTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointDailyRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListHistoryDayTrafficDataByDetectionPointDaily(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryDayTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DownloadTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DownloadHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryDayTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DownloadTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DownloadHistoryDayTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

// RegisterHistoryDayTrafficDataByDetectionPointServiceHandlerServer registers the http handlers for service HistoryDayTrafficDataByDetectionPointService to "mux".
// UnaryRPC     :call HistoryDayTrafficDataByDetectionPointServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterHistoryDayTrafficDataByDetectionPointServiceHandlerFromEndpoint instead.
func RegisterHistoryDayTrafficDataByDetectionPointServiceHandlerServer(ctx context.Context, mux *runtime.ServeMux, server HistoryDayTrafficDataByDetectionPointServiceServer) error {

	mux.Handle("GET", pattern_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/ListHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point/list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/GetHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point/single"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_HistoryDayTrafficDataByDetectionPointService_CreateHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/CreateHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryDayTrafficDataByDetectionPointService_CreateHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_CreateHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_HistoryDayTrafficDataByDetectionPointService_UpdateHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/UpdateHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryDayTrafficDataByDetectionPointService_UpdateHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_UpdateHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/DeleteHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_HistoryDayTrafficDataByDetectionPointService_BulkCreateHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/BulkCreateHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point/bulk"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryDayTrafficDataByDetectionPointService_BulkCreateHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_BulkCreateHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/GetHistoryDayTrafficDataByDetectionPointStatistics", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point/statistics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/ListHistoryDayTrafficDataByDetectionPointDaily", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point/daily"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/DownloadHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point/download"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterHistoryDayTrafficDataByDetectionPointServiceHandlerFromEndpoint is same as RegisterHistoryDayTrafficDataByDetectionPointServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterHistoryDayTrafficDataByDetectionPointServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterHistoryDayTrafficDataByDetectionPointServiceHandler(ctx, mux, conn)
}

// RegisterHistoryDayTrafficDataByDetectionPointServiceHandler registers the http handlers for service HistoryDayTrafficDataByDetectionPointService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterHistoryDayTrafficDataByDetectionPointServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterHistoryDayTrafficDataByDetectionPointServiceHandlerClient(ctx, mux, NewHistoryDayTrafficDataByDetectionPointServiceClient(conn))
}

// RegisterHistoryDayTrafficDataByDetectionPointServiceHandlerClient registers the http handlers for service HistoryDayTrafficDataByDetectionPointService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "HistoryDayTrafficDataByDetectionPointServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "HistoryDayTrafficDataByDetectionPointServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "HistoryDayTrafficDataByDetectionPointServiceClient" to call the correct interceptors.
func RegisterHistoryDayTrafficDataByDetectionPointServiceHandlerClient(ctx context.Context, mux *runtime.ServeMux, client HistoryDayTrafficDataByDetectionPointServiceClient) error {

	mux.Handle("GET", pattern_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/ListHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point/list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/GetHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point/single"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_HistoryDayTrafficDataByDetectionPointService_CreateHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/CreateHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryDayTrafficDataByDetectionPointService_CreateHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_CreateHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_HistoryDayTrafficDataByDetectionPointService_UpdateHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/UpdateHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryDayTrafficDataByDetectionPointService_UpdateHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_UpdateHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/DeleteHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_HistoryDayTrafficDataByDetectionPointService_BulkCreateHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/BulkCreateHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point/bulk"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryDayTrafficDataByDetectionPointService_BulkCreateHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_BulkCreateHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/GetHistoryDayTrafficDataByDetectionPointStatistics", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point/statistics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/ListHistoryDayTrafficDataByDetectionPointDaily", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point/daily"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryDayTrafficDataByDetectionPointService/DownloadHistoryDayTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/history_day/detection_point/download"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "history_day", "detection_point", "list"}, ""))

	pattern_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "history_day", "detection_point", "single"}, ""))

	pattern_HistoryDayTrafficDataByDetectionPointService_CreateHistoryDayTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4}, []string{"api", "v1", "traffic", "history_day", "detection_point"}, ""))

	pattern_HistoryDayTrafficDataByDetectionPointService_UpdateHistoryDayTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4}, []string{"api", "v1", "traffic", "history_day", "detection_point"}, ""))

	pattern_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4}, []string{"api", "v1", "traffic", "history_day", "detection_point"}, ""))

	pattern_HistoryDayTrafficDataByDetectionPointService_BulkCreateHistoryDayTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "history_day", "detection_point", "bulk"}, ""))

	pattern_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "history_day", "detection_point", "statistics"}, ""))

	pattern_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "history_day", "detection_point", "daily"}, ""))

	pattern_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "history_day", "detection_point", "download"}, ""))
)

var (
	forward_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage

	forward_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage

	forward_HistoryDayTrafficDataByDetectionPointService_CreateHistoryDayTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage

	forward_HistoryDayTrafficDataByDetectionPointService_UpdateHistoryDayTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage

	forward_HistoryDayTrafficDataByDetectionPointService_DeleteHistoryDayTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage

	forward_HistoryDayTrafficDataByDetectionPointService_BulkCreateHistoryDayTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage

	forward_HistoryDayTrafficDataByDetectionPointService_GetHistoryDayTrafficDataByDetectionPointStatistics_0 = runtime.ForwardResponseMessage

	forward_HistoryDayTrafficDataByDetectionPointService_ListHistoryDayTrafficDataByDetectionPointDaily_0 = runtime.ForwardResponseMessage

	forward_HistoryDayTrafficDataByDetectionPointService_DownloadHistoryDayTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage
)
