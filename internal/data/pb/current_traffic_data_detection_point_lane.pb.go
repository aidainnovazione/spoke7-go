// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.1
// source: dtos/current_traffic_data_detection_point_lane.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// valori aggregati sul periodo aggregati per ogni corsia
type CurrentTrafficDataByDetectionPointByLane struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ModifiedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	DataSourceName string                 `protobuf:"bytes,3,opt,name=data_source_name,json=dataSourceName,proto3" json:"data_source_name,omitempty"`
	LaneId         string                 `protobuf:"bytes,4,opt,name=lane_id,json=laneId,proto3" json:"lane_id,omitempty"` // definisce univocamente detection_point_id
	// campi relativi all'interallo di aggregazione di 5 min -> dipende dal db
	DetectionTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=detection_timestamp,json=detectionTimestamp,proto3" json:"detection_timestamp,omitempty"`
	DetectionInterval  uint32                 `protobuf:"varint,6,opt,name=detection_interval,json=detectionInterval,proto3" json:"detection_interval,omitempty"`
	// campi conteggio veicoli - somma
	CountVehicleClass_1  uint32 `protobuf:"varint,7,opt,name=count_vehicle_class_1,json=countVehicleClass1,proto3" json:"count_vehicle_class_1,omitempty"`
	CountVehicleClass_2  uint32 `protobuf:"varint,8,opt,name=count_vehicle_class_2,json=countVehicleClass2,proto3" json:"count_vehicle_class_2,omitempty"`
	CountVehicleClass_3  uint32 `protobuf:"varint,9,opt,name=count_vehicle_class_3,json=countVehicleClass3,proto3" json:"count_vehicle_class_3,omitempty"`
	CountVehicleClass_4  uint32 `protobuf:"varint,10,opt,name=count_vehicle_class_4,json=countVehicleClass4,proto3" json:"count_vehicle_class_4,omitempty"`
	CountVehicleClass_5  uint32 `protobuf:"varint,11,opt,name=count_vehicle_class_5,json=countVehicleClass5,proto3" json:"count_vehicle_class_5,omitempty"`
	CountVehicleClass_6  uint32 `protobuf:"varint,12,opt,name=count_vehicle_class_6,json=countVehicleClass6,proto3" json:"count_vehicle_class_6,omitempty"`
	CountVehicleClass_7  uint32 `protobuf:"varint,13,opt,name=count_vehicle_class_7,json=countVehicleClass7,proto3" json:"count_vehicle_class_7,omitempty"`
	CountVehicleClass_8  uint32 `protobuf:"varint,14,opt,name=count_vehicle_class_8,json=countVehicleClass8,proto3" json:"count_vehicle_class_8,omitempty"`
	CountVehicleClassAll uint32 `protobuf:"varint,15,opt,name=count_vehicle_class_all,json=countVehicleClassAll,proto3" json:"count_vehicle_class_all,omitempty"`
	// - media
	HarmonicMeanSpeedVehicleClass_1  float32 `protobuf:"fixed32,16,opt,name=harmonic_mean_speed_vehicle_class_1,json=harmonicMeanSpeedVehicleClass1,proto3" json:"harmonic_mean_speed_vehicle_class_1,omitempty"`
	HarmonicMeanSpeedVehicleClass_2  float32 `protobuf:"fixed32,17,opt,name=harmonic_mean_speed_vehicle_class_2,json=harmonicMeanSpeedVehicleClass2,proto3" json:"harmonic_mean_speed_vehicle_class_2,omitempty"`
	HarmonicMeanSpeedVehicleClass_3  float32 `protobuf:"fixed32,18,opt,name=harmonic_mean_speed_vehicle_class_3,json=harmonicMeanSpeedVehicleClass3,proto3" json:"harmonic_mean_speed_vehicle_class_3,omitempty"`
	HarmonicMeanSpeedVehicleClass_4  float32 `protobuf:"fixed32,19,opt,name=harmonic_mean_speed_vehicle_class_4,json=harmonicMeanSpeedVehicleClass4,proto3" json:"harmonic_mean_speed_vehicle_class_4,omitempty"`
	HarmonicMeanSpeedVehicleClass_5  float32 `protobuf:"fixed32,20,opt,name=harmonic_mean_speed_vehicle_class_5,json=harmonicMeanSpeedVehicleClass5,proto3" json:"harmonic_mean_speed_vehicle_class_5,omitempty"`
	HarmonicMeanSpeedVehicleClass_6  float32 `protobuf:"fixed32,21,opt,name=harmonic_mean_speed_vehicle_class_6,json=harmonicMeanSpeedVehicleClass6,proto3" json:"harmonic_mean_speed_vehicle_class_6,omitempty"`
	HarmonicMeanSpeedVehicleClass_7  float32 `protobuf:"fixed32,22,opt,name=harmonic_mean_speed_vehicle_class_7,json=harmonicMeanSpeedVehicleClass7,proto3" json:"harmonic_mean_speed_vehicle_class_7,omitempty"`
	HarmonicMeanSpeedVehicleClass_8  float32 `protobuf:"fixed32,23,opt,name=harmonic_mean_speed_vehicle_class_8,json=harmonicMeanSpeedVehicleClass8,proto3" json:"harmonic_mean_speed_vehicle_class_8,omitempty"`
	HarmonicMeanSpeedVehicleClassAll float32 `protobuf:"fixed32,24,opt,name=harmonic_mean_speed_vehicle_class_all,json=harmonicMeanSpeedVehicleClassAll,proto3" json:"harmonic_mean_speed_vehicle_class_all,omitempty"`
	// - somma v istantenne rilevate
	// Somma sull’intervallo di aggregazione del numero di velocità istantanee rilevate
	// all’interno di prefissate classi di velocità
	// TBD le classi di velocità
	CountDetectedSpeedVehicleUnder_50       uint32 `protobuf:"varint,25,opt,name=count_detected_speed_vehicle_under_50,json=countDetectedSpeedVehicleUnder50,proto3" json:"count_detected_speed_vehicle_under_50,omitempty"`
	CountDetectedSpeedVehicleBetween_50_100 uint32 `protobuf:"varint,26,opt,name=count_detected_speed_vehicle_between_50_100,json=countDetectedSpeedVehicleBetween50100,proto3" json:"count_detected_speed_vehicle_between_50_100,omitempty"`
	CountDetectedSpeedVehicleOver_100       uint32 `protobuf:"varint,27,opt,name=count_detected_speed_vehicle_over_100,json=countDetectedSpeedVehicleOver100,proto3" json:"count_detected_speed_vehicle_over_100,omitempty"`
	// lunghezza
	AverageVehicleLength float32 `protobuf:"fixed32,28,opt,name=average_vehicle_length,json=averageVehicleLength,proto3" json:"average_vehicle_length,omitempty"`
	// headway fra veicoli
	AverageHeadway float32 `protobuf:"fixed32,29,opt,name=average_headway,json=averageHeadway,proto3" json:"average_headway,omitempty"`
	StdHeadway     float32 `protobuf:"fixed32,30,opt,name=std_headway,json=stdHeadway,proto3" json:"std_headway,omitempty"`
	// time-to-collision
	AverageTimeToCollision float32 `protobuf:"fixed32,31,opt,name=average_time_to_collision,json=averageTimeToCollision,proto3" json:"average_time_to_collision,omitempty"`
	StdTimeToCollision     float32 `protobuf:"fixed32,32,opt,name=std_time_to_collision,json=stdTimeToCollision,proto3" json:"std_time_to_collision,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CurrentTrafficDataByDetectionPointByLane) Reset() {
	*x = CurrentTrafficDataByDetectionPointByLane{}
	mi := &file_dtos_current_traffic_data_detection_point_lane_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrentTrafficDataByDetectionPointByLane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentTrafficDataByDetectionPointByLane) ProtoMessage() {}

func (x *CurrentTrafficDataByDetectionPointByLane) ProtoReflect() protoreflect.Message {
	mi := &file_dtos_current_traffic_data_detection_point_lane_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentTrafficDataByDetectionPointByLane.ProtoReflect.Descriptor instead.
func (*CurrentTrafficDataByDetectionPointByLane) Descriptor() ([]byte, []int) {
	return file_dtos_current_traffic_data_detection_point_lane_proto_rawDescGZIP(), []int{0}
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetDataSourceName() string {
	if x != nil {
		return x.DataSourceName
	}
	return ""
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetLaneId() string {
	if x != nil {
		return x.LaneId
	}
	return ""
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetDetectionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DetectionTimestamp
	}
	return nil
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetDetectionInterval() uint32 {
	if x != nil {
		return x.DetectionInterval
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCountVehicleClass_1() uint32 {
	if x != nil {
		return x.CountVehicleClass_1
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCountVehicleClass_2() uint32 {
	if x != nil {
		return x.CountVehicleClass_2
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCountVehicleClass_3() uint32 {
	if x != nil {
		return x.CountVehicleClass_3
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCountVehicleClass_4() uint32 {
	if x != nil {
		return x.CountVehicleClass_4
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCountVehicleClass_5() uint32 {
	if x != nil {
		return x.CountVehicleClass_5
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCountVehicleClass_6() uint32 {
	if x != nil {
		return x.CountVehicleClass_6
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCountVehicleClass_7() uint32 {
	if x != nil {
		return x.CountVehicleClass_7
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCountVehicleClass_8() uint32 {
	if x != nil {
		return x.CountVehicleClass_8
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCountVehicleClassAll() uint32 {
	if x != nil {
		return x.CountVehicleClassAll
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetHarmonicMeanSpeedVehicleClass_1() float32 {
	if x != nil {
		return x.HarmonicMeanSpeedVehicleClass_1
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetHarmonicMeanSpeedVehicleClass_2() float32 {
	if x != nil {
		return x.HarmonicMeanSpeedVehicleClass_2
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetHarmonicMeanSpeedVehicleClass_3() float32 {
	if x != nil {
		return x.HarmonicMeanSpeedVehicleClass_3
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetHarmonicMeanSpeedVehicleClass_4() float32 {
	if x != nil {
		return x.HarmonicMeanSpeedVehicleClass_4
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetHarmonicMeanSpeedVehicleClass_5() float32 {
	if x != nil {
		return x.HarmonicMeanSpeedVehicleClass_5
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetHarmonicMeanSpeedVehicleClass_6() float32 {
	if x != nil {
		return x.HarmonicMeanSpeedVehicleClass_6
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetHarmonicMeanSpeedVehicleClass_7() float32 {
	if x != nil {
		return x.HarmonicMeanSpeedVehicleClass_7
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetHarmonicMeanSpeedVehicleClass_8() float32 {
	if x != nil {
		return x.HarmonicMeanSpeedVehicleClass_8
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetHarmonicMeanSpeedVehicleClassAll() float32 {
	if x != nil {
		return x.HarmonicMeanSpeedVehicleClassAll
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCountDetectedSpeedVehicleUnder_50() uint32 {
	if x != nil {
		return x.CountDetectedSpeedVehicleUnder_50
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCountDetectedSpeedVehicleBetween_50_100() uint32 {
	if x != nil {
		return x.CountDetectedSpeedVehicleBetween_50_100
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetCountDetectedSpeedVehicleOver_100() uint32 {
	if x != nil {
		return x.CountDetectedSpeedVehicleOver_100
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetAverageVehicleLength() float32 {
	if x != nil {
		return x.AverageVehicleLength
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetAverageHeadway() float32 {
	if x != nil {
		return x.AverageHeadway
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetStdHeadway() float32 {
	if x != nil {
		return x.StdHeadway
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetAverageTimeToCollision() float32 {
	if x != nil {
		return x.AverageTimeToCollision
	}
	return 0
}

func (x *CurrentTrafficDataByDetectionPointByLane) GetStdTimeToCollision() float32 {
	if x != nil {
		return x.StdTimeToCollision
	}
	return 0
}

var File_dtos_current_traffic_data_detection_point_lane_proto protoreflect.FileDescriptor

const file_dtos_current_traffic_data_detection_point_lane_proto_rawDesc = "" +
	"\n" +
	"4dtos/current_traffic_data_detection_point_lane.proto\x12\x02pb\x1a\x1fgoogle/protobuf/timestamp.proto\"\xd5\x0f\n" +
	"(CurrentTrafficDataByDetectionPointByLane\x129\n" +
	"\n" +
	"created_at\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12;\n" +
	"\vmodified_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"modifiedAt\x12(\n" +
	"\x10data_source_name\x18\x03 \x01(\tR\x0edataSourceName\x12\x17\n" +
	"\alane_id\x18\x04 \x01(\tR\x06laneId\x12K\n" +
	"\x13detection_timestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x12detectionTimestamp\x12-\n" +
	"\x12detection_interval\x18\x06 \x01(\rR\x11detectionInterval\x121\n" +
	"\x15count_vehicle_class_1\x18\a \x01(\rR\x12countVehicleClass1\x121\n" +
	"\x15count_vehicle_class_2\x18\b \x01(\rR\x12countVehicleClass2\x121\n" +
	"\x15count_vehicle_class_3\x18\t \x01(\rR\x12countVehicleClass3\x121\n" +
	"\x15count_vehicle_class_4\x18\n" +
	" \x01(\rR\x12countVehicleClass4\x121\n" +
	"\x15count_vehicle_class_5\x18\v \x01(\rR\x12countVehicleClass5\x121\n" +
	"\x15count_vehicle_class_6\x18\f \x01(\rR\x12countVehicleClass6\x121\n" +
	"\x15count_vehicle_class_7\x18\r \x01(\rR\x12countVehicleClass7\x121\n" +
	"\x15count_vehicle_class_8\x18\x0e \x01(\rR\x12countVehicleClass8\x125\n" +
	"\x17count_vehicle_class_all\x18\x0f \x01(\rR\x14countVehicleClassAll\x12K\n" +
	"#harmonic_mean_speed_vehicle_class_1\x18\x10 \x01(\x02R\x1eharmonicMeanSpeedVehicleClass1\x12K\n" +
	"#harmonic_mean_speed_vehicle_class_2\x18\x11 \x01(\x02R\x1eharmonicMeanSpeedVehicleClass2\x12K\n" +
	"#harmonic_mean_speed_vehicle_class_3\x18\x12 \x01(\x02R\x1eharmonicMeanSpeedVehicleClass3\x12K\n" +
	"#harmonic_mean_speed_vehicle_class_4\x18\x13 \x01(\x02R\x1eharmonicMeanSpeedVehicleClass4\x12K\n" +
	"#harmonic_mean_speed_vehicle_class_5\x18\x14 \x01(\x02R\x1eharmonicMeanSpeedVehicleClass5\x12K\n" +
	"#harmonic_mean_speed_vehicle_class_6\x18\x15 \x01(\x02R\x1eharmonicMeanSpeedVehicleClass6\x12K\n" +
	"#harmonic_mean_speed_vehicle_class_7\x18\x16 \x01(\x02R\x1eharmonicMeanSpeedVehicleClass7\x12K\n" +
	"#harmonic_mean_speed_vehicle_class_8\x18\x17 \x01(\x02R\x1eharmonicMeanSpeedVehicleClass8\x12O\n" +
	"%harmonic_mean_speed_vehicle_class_all\x18\x18 \x01(\x02R harmonicMeanSpeedVehicleClassAll\x12O\n" +
	"%count_detected_speed_vehicle_under_50\x18\x19 \x01(\rR countDetectedSpeedVehicleUnder50\x12Z\n" +
	"+count_detected_speed_vehicle_between_50_100\x18\x1a \x01(\rR%countDetectedSpeedVehicleBetween50100\x12O\n" +
	"%count_detected_speed_vehicle_over_100\x18\x1b \x01(\rR countDetectedSpeedVehicleOver100\x124\n" +
	"\x16average_vehicle_length\x18\x1c \x01(\x02R\x14averageVehicleLength\x12'\n" +
	"\x0faverage_headway\x18\x1d \x01(\x02R\x0eaverageHeadway\x12\x1f\n" +
	"\vstd_headway\x18\x1e \x01(\x02R\n" +
	"stdHeadway\x129\n" +
	"\x19average_time_to_collision\x18\x1f \x01(\x02R\x16averageTimeToCollision\x121\n" +
	"\x15std_time_to_collision\x18  \x01(\x02R\x12stdTimeToCollisionB\x12Z\x10internal/data/pbb\x06proto3"

var (
	file_dtos_current_traffic_data_detection_point_lane_proto_rawDescOnce sync.Once
	file_dtos_current_traffic_data_detection_point_lane_proto_rawDescData []byte
)

func file_dtos_current_traffic_data_detection_point_lane_proto_rawDescGZIP() []byte {
	file_dtos_current_traffic_data_detection_point_lane_proto_rawDescOnce.Do(func() {
		file_dtos_current_traffic_data_detection_point_lane_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dtos_current_traffic_data_detection_point_lane_proto_rawDesc), len(file_dtos_current_traffic_data_detection_point_lane_proto_rawDesc)))
	})
	return file_dtos_current_traffic_data_detection_point_lane_proto_rawDescData
}

var file_dtos_current_traffic_data_detection_point_lane_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_dtos_current_traffic_data_detection_point_lane_proto_goTypes = []any{
	(*CurrentTrafficDataByDetectionPointByLane)(nil), // 0: pb.CurrentTrafficDataByDetectionPointByLane
	(*timestamppb.Timestamp)(nil),                    // 1: google.protobuf.Timestamp
}
var file_dtos_current_traffic_data_detection_point_lane_proto_depIdxs = []int32{
	1, // 0: pb.CurrentTrafficDataByDetectionPointByLane.created_at:type_name -> google.protobuf.Timestamp
	1, // 1: pb.CurrentTrafficDataByDetectionPointByLane.modified_at:type_name -> google.protobuf.Timestamp
	1, // 2: pb.CurrentTrafficDataByDetectionPointByLane.detection_timestamp:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_dtos_current_traffic_data_detection_point_lane_proto_init() }
func file_dtos_current_traffic_data_detection_point_lane_proto_init() {
	if File_dtos_current_traffic_data_detection_point_lane_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dtos_current_traffic_data_detection_point_lane_proto_rawDesc), len(file_dtos_current_traffic_data_detection_point_lane_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dtos_current_traffic_data_detection_point_lane_proto_goTypes,
		DependencyIndexes: file_dtos_current_traffic_data_detection_point_lane_proto_depIdxs,
		MessageInfos:      file_dtos_current_traffic_data_detection_point_lane_proto_msgTypes,
	}.Build()
	File_dtos_current_traffic_data_detection_point_lane_proto = out.File
	file_dtos_current_traffic_data_detection_point_lane_proto_goTypes = nil
	file_dtos_current_traffic_data_detection_point_lane_proto_depIdxs = nil
}
