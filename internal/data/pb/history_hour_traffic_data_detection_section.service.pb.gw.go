// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: services/history_hour_traffic_data_detection_section.service.proto

/*
Package pb is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package pb

import (
	"context"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join

var (
	filter_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryHourTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListHistoryHourTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryHourTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListHistoryHourTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryHourTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetHistoryHourTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryHourTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetHistoryHourTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

func request_HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryHourTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateHistoryHourTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateHistoryHourTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryHourTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateHistoryHourTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateHistoryHourTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

func request_HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryHourTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateHistoryHourTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateHistoryHourTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryHourTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateHistoryHourTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateHistoryHourTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryHourTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DeleteHistoryHourTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryHourTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DeleteHistoryHourTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

func request_HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryHourTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BulkCreateTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.BulkCreateHistoryHourTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryHourTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BulkCreateTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.BulkCreateHistoryHourTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryHourTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionSectionStatisticsRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetHistoryHourTrafficDataByDetectionSectionStatistics(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryHourTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionSectionStatisticsRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetHistoryHourTrafficDataByDetectionSectionStatistics(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryHourTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionSectionDailyRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListHistoryHourTrafficDataByDetectionSectionDaily(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryHourTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionSectionDailyRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListHistoryHourTrafficDataByDetectionSectionDaily(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client HistoryHourTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DownloadTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DownloadHistoryHourTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server HistoryHourTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DownloadTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DownloadHistoryHourTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

// RegisterHistoryHourTrafficDataByDetectionSectionServiceHandlerServer registers the http handlers for service HistoryHourTrafficDataByDetectionSectionService to "mux".
// UnaryRPC     :call HistoryHourTrafficDataByDetectionSectionServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterHistoryHourTrafficDataByDetectionSectionServiceHandlerFromEndpoint instead.
func RegisterHistoryHourTrafficDataByDetectionSectionServiceHandlerServer(ctx context.Context, mux *runtime.ServeMux, server HistoryHourTrafficDataByDetectionSectionServiceServer) error {

	mux.Handle("GET", pattern_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/ListHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section/list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/GetHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section/single"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/CreateHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/UpdateHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/DeleteHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/BulkCreateHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section/bulk"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/GetHistoryHourTrafficDataByDetectionSectionStatistics", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section/statistics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/ListHistoryHourTrafficDataByDetectionSectionDaily", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section/daily"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/DownloadHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section/download"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterHistoryHourTrafficDataByDetectionSectionServiceHandlerFromEndpoint is same as RegisterHistoryHourTrafficDataByDetectionSectionServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterHistoryHourTrafficDataByDetectionSectionServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterHistoryHourTrafficDataByDetectionSectionServiceHandler(ctx, mux, conn)
}

// RegisterHistoryHourTrafficDataByDetectionSectionServiceHandler registers the http handlers for service HistoryHourTrafficDataByDetectionSectionService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterHistoryHourTrafficDataByDetectionSectionServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterHistoryHourTrafficDataByDetectionSectionServiceHandlerClient(ctx, mux, NewHistoryHourTrafficDataByDetectionSectionServiceClient(conn))
}

// RegisterHistoryHourTrafficDataByDetectionSectionServiceHandlerClient registers the http handlers for service HistoryHourTrafficDataByDetectionSectionService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "HistoryHourTrafficDataByDetectionSectionServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "HistoryHourTrafficDataByDetectionSectionServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "HistoryHourTrafficDataByDetectionSectionServiceClient" to call the correct interceptors.
func RegisterHistoryHourTrafficDataByDetectionSectionServiceHandlerClient(ctx context.Context, mux *runtime.ServeMux, client HistoryHourTrafficDataByDetectionSectionServiceClient) error {

	mux.Handle("GET", pattern_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/ListHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section/list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/GetHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section/single"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/CreateHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/UpdateHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/DeleteHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/BulkCreateHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section/bulk"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/GetHistoryHourTrafficDataByDetectionSectionStatistics", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section/statistics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/ListHistoryHourTrafficDataByDetectionSectionDaily", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section/daily"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.HistoryHourTrafficDataByDetectionSectionService/DownloadHistoryHourTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/history_hour/detection_section/download"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "history_hour", "detection_section", "list"}, ""))

	pattern_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "history_hour", "detection_section", "single"}, ""))

	pattern_HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4}, []string{"api", "v1", "traffic", "history_hour", "detection_section"}, ""))

	pattern_HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4}, []string{"api", "v1", "traffic", "history_hour", "detection_section"}, ""))

	pattern_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4}, []string{"api", "v1", "traffic", "history_hour", "detection_section"}, ""))

	pattern_HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "history_hour", "detection_section", "bulk"}, ""))

	pattern_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "history_hour", "detection_section", "statistics"}, ""))

	pattern_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "history_hour", "detection_section", "daily"}, ""))

	pattern_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "history_hour", "detection_section", "download"}, ""))
)

var (
	forward_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage

	forward_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage

	forward_HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage

	forward_HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage

	forward_HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage

	forward_HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage

	forward_HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_0 = runtime.ForwardResponseMessage

	forward_HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_0 = runtime.ForwardResponseMessage

	forward_HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage
)
