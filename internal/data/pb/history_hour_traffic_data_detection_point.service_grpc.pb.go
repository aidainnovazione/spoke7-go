// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: services/history_hour_traffic_data_detection_point.service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HistoryHourTrafficDataByDetectionPointService_ListHistoryHourTrafficDataByDetectionPoint_FullMethodName          = "/pb.HistoryHourTrafficDataByDetectionPointService/ListHistoryHourTrafficDataByDetectionPoint"
	HistoryHourTrafficDataByDetectionPointService_GetHistoryHourTrafficDataByDetectionPoint_FullMethodName           = "/pb.HistoryHourTrafficDataByDetectionPointService/GetHistoryHourTrafficDataByDetectionPoint"
	HistoryHourTrafficDataByDetectionPointService_CreateHistoryHourTrafficDataByDetectionPoint_FullMethodName        = "/pb.HistoryHourTrafficDataByDetectionPointService/CreateHistoryHourTrafficDataByDetectionPoint"
	HistoryHourTrafficDataByDetectionPointService_UpdateHistoryHourTrafficDataByDetectionPoint_FullMethodName        = "/pb.HistoryHourTrafficDataByDetectionPointService/UpdateHistoryHourTrafficDataByDetectionPoint"
	HistoryHourTrafficDataByDetectionPointService_DeleteHistoryHourTrafficDataByDetectionPoint_FullMethodName        = "/pb.HistoryHourTrafficDataByDetectionPointService/DeleteHistoryHourTrafficDataByDetectionPoint"
	HistoryHourTrafficDataByDetectionPointService_BulkCreateHistoryHourTrafficDataByDetectionPoint_FullMethodName    = "/pb.HistoryHourTrafficDataByDetectionPointService/BulkCreateHistoryHourTrafficDataByDetectionPoint"
	HistoryHourTrafficDataByDetectionPointService_GetHistoryHourTrafficDataByDetectionPointStatistics_FullMethodName = "/pb.HistoryHourTrafficDataByDetectionPointService/GetHistoryHourTrafficDataByDetectionPointStatistics"
	HistoryHourTrafficDataByDetectionPointService_ListHistoryHourTrafficDataByDetectionPointDaily_FullMethodName     = "/pb.HistoryHourTrafficDataByDetectionPointService/ListHistoryHourTrafficDataByDetectionPointDaily"
	HistoryHourTrafficDataByDetectionPointService_DownloadHistoryHourTrafficDataByDetectionPoint_FullMethodName      = "/pb.HistoryHourTrafficDataByDetectionPointService/DownloadHistoryHourTrafficDataByDetectionPoint"
)

// HistoryHourTrafficDataByDetectionPointServiceClient is the client API for HistoryHourTrafficDataByDetectionPointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryHourTrafficDataByDetectionPointServiceClient interface {
	ListHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *ListTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*ListHistoryHourTrafficDataByDetectionPointResponse, error)
	GetHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *GetTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*GetHistoryHourTrafficDataByDetectionPointResponse, error)
	CreateHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *CreateHistoryHourTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*CreateHistoryHourTrafficDataByDetectionPointResponse, error)
	UpdateHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *UpdateHistoryHourTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*UpdateHistoryHourTrafficDataByDetectionPointResponse, error)
	DeleteHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *DeleteTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkCreateHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *BulkCreateTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionPointResponse, error)
	GetHistoryHourTrafficDataByDetectionPointStatistics(ctx context.Context, in *GetTrafficDataByDetectionPointStatisticsRequest, opts ...grpc.CallOption) (*GetTrafficDataByDetectionPointStatisticsResponse, error)
	ListHistoryHourTrafficDataByDetectionPointDaily(ctx context.Context, in *ListTrafficDataByDetectionPointDailyRequest, opts ...grpc.CallOption) (*ListHistoryHourTrafficDataByDetectionPointDailyResponse, error)
	DownloadHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *DownloadTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
}

type historyHourTrafficDataByDetectionPointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryHourTrafficDataByDetectionPointServiceClient(cc grpc.ClientConnInterface) HistoryHourTrafficDataByDetectionPointServiceClient {
	return &historyHourTrafficDataByDetectionPointServiceClient{cc}
}

func (c *historyHourTrafficDataByDetectionPointServiceClient) ListHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *ListTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*ListHistoryHourTrafficDataByDetectionPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHistoryHourTrafficDataByDetectionPointResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointService_ListHistoryHourTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointServiceClient) GetHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *GetTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*GetHistoryHourTrafficDataByDetectionPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryHourTrafficDataByDetectionPointResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointService_GetHistoryHourTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointServiceClient) CreateHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *CreateHistoryHourTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*CreateHistoryHourTrafficDataByDetectionPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHistoryHourTrafficDataByDetectionPointResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointService_CreateHistoryHourTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointServiceClient) UpdateHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *UpdateHistoryHourTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*UpdateHistoryHourTrafficDataByDetectionPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHistoryHourTrafficDataByDetectionPointResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointService_UpdateHistoryHourTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointServiceClient) DeleteHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *DeleteTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointService_DeleteHistoryHourTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointServiceClient) BulkCreateHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *BulkCreateTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateTrafficDataByDetectionPointResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointService_BulkCreateHistoryHourTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointServiceClient) GetHistoryHourTrafficDataByDetectionPointStatistics(ctx context.Context, in *GetTrafficDataByDetectionPointStatisticsRequest, opts ...grpc.CallOption) (*GetTrafficDataByDetectionPointStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrafficDataByDetectionPointStatisticsResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointService_GetHistoryHourTrafficDataByDetectionPointStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointServiceClient) ListHistoryHourTrafficDataByDetectionPointDaily(ctx context.Context, in *ListTrafficDataByDetectionPointDailyRequest, opts ...grpc.CallOption) (*ListHistoryHourTrafficDataByDetectionPointDailyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHistoryHourTrafficDataByDetectionPointDailyResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointService_ListHistoryHourTrafficDataByDetectionPointDaily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointServiceClient) DownloadHistoryHourTrafficDataByDetectionPoint(ctx context.Context, in *DownloadTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointService_DownloadHistoryHourTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryHourTrafficDataByDetectionPointServiceServer is the server API for HistoryHourTrafficDataByDetectionPointService service.
// All implementations must embed UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer
// for forward compatibility.
type HistoryHourTrafficDataByDetectionPointServiceServer interface {
	ListHistoryHourTrafficDataByDetectionPoint(context.Context, *ListTrafficDataByDetectionPointRequest) (*ListHistoryHourTrafficDataByDetectionPointResponse, error)
	GetHistoryHourTrafficDataByDetectionPoint(context.Context, *GetTrafficDataByDetectionPointRequest) (*GetHistoryHourTrafficDataByDetectionPointResponse, error)
	CreateHistoryHourTrafficDataByDetectionPoint(context.Context, *CreateHistoryHourTrafficDataByDetectionPointRequest) (*CreateHistoryHourTrafficDataByDetectionPointResponse, error)
	UpdateHistoryHourTrafficDataByDetectionPoint(context.Context, *UpdateHistoryHourTrafficDataByDetectionPointRequest) (*UpdateHistoryHourTrafficDataByDetectionPointResponse, error)
	DeleteHistoryHourTrafficDataByDetectionPoint(context.Context, *DeleteTrafficDataByDetectionPointRequest) (*emptypb.Empty, error)
	BulkCreateHistoryHourTrafficDataByDetectionPoint(context.Context, *BulkCreateTrafficDataByDetectionPointRequest) (*BulkCreateTrafficDataByDetectionPointResponse, error)
	GetHistoryHourTrafficDataByDetectionPointStatistics(context.Context, *GetTrafficDataByDetectionPointStatisticsRequest) (*GetTrafficDataByDetectionPointStatisticsResponse, error)
	ListHistoryHourTrafficDataByDetectionPointDaily(context.Context, *ListTrafficDataByDetectionPointDailyRequest) (*ListHistoryHourTrafficDataByDetectionPointDailyResponse, error)
	DownloadHistoryHourTrafficDataByDetectionPoint(context.Context, *DownloadTrafficDataByDetectionPointRequest) (*DownloadResponse, error)
	mustEmbedUnimplementedHistoryHourTrafficDataByDetectionPointServiceServer()
}

// UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer struct{}

func (UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer) ListHistoryHourTrafficDataByDetectionPoint(context.Context, *ListTrafficDataByDetectionPointRequest) (*ListHistoryHourTrafficDataByDetectionPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryHourTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer) GetHistoryHourTrafficDataByDetectionPoint(context.Context, *GetTrafficDataByDetectionPointRequest) (*GetHistoryHourTrafficDataByDetectionPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryHourTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer) CreateHistoryHourTrafficDataByDetectionPoint(context.Context, *CreateHistoryHourTrafficDataByDetectionPointRequest) (*CreateHistoryHourTrafficDataByDetectionPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHistoryHourTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer) UpdateHistoryHourTrafficDataByDetectionPoint(context.Context, *UpdateHistoryHourTrafficDataByDetectionPointRequest) (*UpdateHistoryHourTrafficDataByDetectionPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHistoryHourTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer) DeleteHistoryHourTrafficDataByDetectionPoint(context.Context, *DeleteTrafficDataByDetectionPointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistoryHourTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer) BulkCreateHistoryHourTrafficDataByDetectionPoint(context.Context, *BulkCreateTrafficDataByDetectionPointRequest) (*BulkCreateTrafficDataByDetectionPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateHistoryHourTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer) GetHistoryHourTrafficDataByDetectionPointStatistics(context.Context, *GetTrafficDataByDetectionPointStatisticsRequest) (*GetTrafficDataByDetectionPointStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryHourTrafficDataByDetectionPointStatistics not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer) ListHistoryHourTrafficDataByDetectionPointDaily(context.Context, *ListTrafficDataByDetectionPointDailyRequest) (*ListHistoryHourTrafficDataByDetectionPointDailyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryHourTrafficDataByDetectionPointDaily not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer) DownloadHistoryHourTrafficDataByDetectionPoint(context.Context, *DownloadTrafficDataByDetectionPointRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadHistoryHourTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer) mustEmbedUnimplementedHistoryHourTrafficDataByDetectionPointServiceServer() {
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer) testEmbeddedByValue() {}

// UnsafeHistoryHourTrafficDataByDetectionPointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryHourTrafficDataByDetectionPointServiceServer will
// result in compilation errors.
type UnsafeHistoryHourTrafficDataByDetectionPointServiceServer interface {
	mustEmbedUnimplementedHistoryHourTrafficDataByDetectionPointServiceServer()
}

func RegisterHistoryHourTrafficDataByDetectionPointServiceServer(s grpc.ServiceRegistrar, srv HistoryHourTrafficDataByDetectionPointServiceServer) {
	// If the following call pancis, it indicates UnimplementedHistoryHourTrafficDataByDetectionPointServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HistoryHourTrafficDataByDetectionPointService_ServiceDesc, srv)
}

func _HistoryHourTrafficDataByDetectionPointService_ListHistoryHourTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).ListHistoryHourTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointService_ListHistoryHourTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).ListHistoryHourTrafficDataByDetectionPoint(ctx, req.(*ListTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointService_GetHistoryHourTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).GetHistoryHourTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointService_GetHistoryHourTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).GetHistoryHourTrafficDataByDetectionPoint(ctx, req.(*GetTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointService_CreateHistoryHourTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHistoryHourTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).CreateHistoryHourTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointService_CreateHistoryHourTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).CreateHistoryHourTrafficDataByDetectionPoint(ctx, req.(*CreateHistoryHourTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointService_UpdateHistoryHourTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHistoryHourTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).UpdateHistoryHourTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointService_UpdateHistoryHourTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).UpdateHistoryHourTrafficDataByDetectionPoint(ctx, req.(*UpdateHistoryHourTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointService_DeleteHistoryHourTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).DeleteHistoryHourTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointService_DeleteHistoryHourTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).DeleteHistoryHourTrafficDataByDetectionPoint(ctx, req.(*DeleteTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointService_BulkCreateHistoryHourTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).BulkCreateHistoryHourTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointService_BulkCreateHistoryHourTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).BulkCreateHistoryHourTrafficDataByDetectionPoint(ctx, req.(*BulkCreateTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointService_GetHistoryHourTrafficDataByDetectionPointStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionPointStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).GetHistoryHourTrafficDataByDetectionPointStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointService_GetHistoryHourTrafficDataByDetectionPointStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).GetHistoryHourTrafficDataByDetectionPointStatistics(ctx, req.(*GetTrafficDataByDetectionPointStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointService_ListHistoryHourTrafficDataByDetectionPointDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionPointDailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).ListHistoryHourTrafficDataByDetectionPointDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointService_ListHistoryHourTrafficDataByDetectionPointDaily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).ListHistoryHourTrafficDataByDetectionPointDaily(ctx, req.(*ListTrafficDataByDetectionPointDailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointService_DownloadHistoryHourTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).DownloadHistoryHourTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointService_DownloadHistoryHourTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointServiceServer).DownloadHistoryHourTrafficDataByDetectionPoint(ctx, req.(*DownloadTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryHourTrafficDataByDetectionPointService_ServiceDesc is the grpc.ServiceDesc for HistoryHourTrafficDataByDetectionPointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryHourTrafficDataByDetectionPointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HistoryHourTrafficDataByDetectionPointService",
	HandlerType: (*HistoryHourTrafficDataByDetectionPointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHistoryHourTrafficDataByDetectionPoint",
			Handler:    _HistoryHourTrafficDataByDetectionPointService_ListHistoryHourTrafficDataByDetectionPoint_Handler,
		},
		{
			MethodName: "GetHistoryHourTrafficDataByDetectionPoint",
			Handler:    _HistoryHourTrafficDataByDetectionPointService_GetHistoryHourTrafficDataByDetectionPoint_Handler,
		},
		{
			MethodName: "CreateHistoryHourTrafficDataByDetectionPoint",
			Handler:    _HistoryHourTrafficDataByDetectionPointService_CreateHistoryHourTrafficDataByDetectionPoint_Handler,
		},
		{
			MethodName: "UpdateHistoryHourTrafficDataByDetectionPoint",
			Handler:    _HistoryHourTrafficDataByDetectionPointService_UpdateHistoryHourTrafficDataByDetectionPoint_Handler,
		},
		{
			MethodName: "DeleteHistoryHourTrafficDataByDetectionPoint",
			Handler:    _HistoryHourTrafficDataByDetectionPointService_DeleteHistoryHourTrafficDataByDetectionPoint_Handler,
		},
		{
			MethodName: "BulkCreateHistoryHourTrafficDataByDetectionPoint",
			Handler:    _HistoryHourTrafficDataByDetectionPointService_BulkCreateHistoryHourTrafficDataByDetectionPoint_Handler,
		},
		{
			MethodName: "GetHistoryHourTrafficDataByDetectionPointStatistics",
			Handler:    _HistoryHourTrafficDataByDetectionPointService_GetHistoryHourTrafficDataByDetectionPointStatistics_Handler,
		},
		{
			MethodName: "ListHistoryHourTrafficDataByDetectionPointDaily",
			Handler:    _HistoryHourTrafficDataByDetectionPointService_ListHistoryHourTrafficDataByDetectionPointDaily_Handler,
		},
		{
			MethodName: "DownloadHistoryHourTrafficDataByDetectionPoint",
			Handler:    _HistoryHourTrafficDataByDetectionPointService_DownloadHistoryHourTrafficDataByDetectionPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/history_hour_traffic_data_detection_point.service.proto",
}
