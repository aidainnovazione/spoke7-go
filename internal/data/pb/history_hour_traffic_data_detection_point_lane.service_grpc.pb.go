// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: services/history_hour_traffic_data_detection_point_lane.service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HistoryHourTrafficDataByDetectionPointByLaneService_ListHistoryHourTrafficDataByDetectionPointByLane_FullMethodName          = "/pb.HistoryHourTrafficDataByDetectionPointByLaneService/ListHistoryHourTrafficDataByDetectionPointByLane"
	HistoryHourTrafficDataByDetectionPointByLaneService_GetHistoryHourTrafficDataByDetectionPointByLane_FullMethodName           = "/pb.HistoryHourTrafficDataByDetectionPointByLaneService/GetHistoryHourTrafficDataByDetectionPointByLane"
	HistoryHourTrafficDataByDetectionPointByLaneService_CreateHistoryHourTrafficDataByDetectionPointByLane_FullMethodName        = "/pb.HistoryHourTrafficDataByDetectionPointByLaneService/CreateHistoryHourTrafficDataByDetectionPointByLane"
	HistoryHourTrafficDataByDetectionPointByLaneService_UpdateHistoryHourTrafficDataByDetectionPointByLane_FullMethodName        = "/pb.HistoryHourTrafficDataByDetectionPointByLaneService/UpdateHistoryHourTrafficDataByDetectionPointByLane"
	HistoryHourTrafficDataByDetectionPointByLaneService_DeleteHistoryHourTrafficDataByDetectionPointByLane_FullMethodName        = "/pb.HistoryHourTrafficDataByDetectionPointByLaneService/DeleteHistoryHourTrafficDataByDetectionPointByLane"
	HistoryHourTrafficDataByDetectionPointByLaneService_BulkCreateHistoryHourTrafficDataByDetectionPointByLane_FullMethodName    = "/pb.HistoryHourTrafficDataByDetectionPointByLaneService/BulkCreateHistoryHourTrafficDataByDetectionPointByLane"
	HistoryHourTrafficDataByDetectionPointByLaneService_GetHistoryHourTrafficDataByDetectionPointByLaneStatistics_FullMethodName = "/pb.HistoryHourTrafficDataByDetectionPointByLaneService/GetHistoryHourTrafficDataByDetectionPointByLaneStatistics"
	HistoryHourTrafficDataByDetectionPointByLaneService_ListHistoryHourTrafficDataByDetectionPointByLaneDaily_FullMethodName     = "/pb.HistoryHourTrafficDataByDetectionPointByLaneService/ListHistoryHourTrafficDataByDetectionPointByLaneDaily"
	HistoryHourTrafficDataByDetectionPointByLaneService_DownloadHistoryHourTrafficDataByDetectionPointByLane_FullMethodName      = "/pb.HistoryHourTrafficDataByDetectionPointByLaneService/DownloadHistoryHourTrafficDataByDetectionPointByLane"
)

// HistoryHourTrafficDataByDetectionPointByLaneServiceClient is the client API for HistoryHourTrafficDataByDetectionPointByLaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryHourTrafficDataByDetectionPointByLaneServiceClient interface {
	ListHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *ListTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*ListHistoryHourTrafficDataByDetectionPointByLaneResponse, error)
	GetHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *GetTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*GetHistoryHourTrafficDataByDetectionPointByLaneResponse, error)
	CreateHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *CreateHistoryHourTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*CreateHistoryHourTrafficDataByDetectionPointByLaneResponse, error)
	UpdateHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *UpdateHistoryHourTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*UpdateHistoryHourTrafficDataByDetectionPointByLaneResponse, error)
	DeleteHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *DeleteTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkCreateHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *BulkCreateTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionPointByLaneResponse, error)
	GetHistoryHourTrafficDataByDetectionPointByLaneStatistics(ctx context.Context, in *GetTrafficDataByDetectionPointByLaneStatisticsRequest, opts ...grpc.CallOption) (*GetTrafficDataByDetectionPointByLaneStatisticsResponse, error)
	ListHistoryHourTrafficDataByDetectionPointByLaneDaily(ctx context.Context, in *ListTrafficDataByDetectionPointByLaneDailyRequest, opts ...grpc.CallOption) (*ListHistoryHourTrafficDataByDetectionPointByLaneDailyResponse, error)
	DownloadHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *DownloadTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
}

type historyHourTrafficDataByDetectionPointByLaneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryHourTrafficDataByDetectionPointByLaneServiceClient(cc grpc.ClientConnInterface) HistoryHourTrafficDataByDetectionPointByLaneServiceClient {
	return &historyHourTrafficDataByDetectionPointByLaneServiceClient{cc}
}

func (c *historyHourTrafficDataByDetectionPointByLaneServiceClient) ListHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *ListTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*ListHistoryHourTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHistoryHourTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointByLaneService_ListHistoryHourTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointByLaneServiceClient) GetHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *GetTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*GetHistoryHourTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryHourTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointByLaneService_GetHistoryHourTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointByLaneServiceClient) CreateHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *CreateHistoryHourTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*CreateHistoryHourTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHistoryHourTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointByLaneService_CreateHistoryHourTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointByLaneServiceClient) UpdateHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *UpdateHistoryHourTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*UpdateHistoryHourTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHistoryHourTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointByLaneService_UpdateHistoryHourTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointByLaneServiceClient) DeleteHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *DeleteTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointByLaneService_DeleteHistoryHourTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointByLaneServiceClient) BulkCreateHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *BulkCreateTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointByLaneService_BulkCreateHistoryHourTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointByLaneServiceClient) GetHistoryHourTrafficDataByDetectionPointByLaneStatistics(ctx context.Context, in *GetTrafficDataByDetectionPointByLaneStatisticsRequest, opts ...grpc.CallOption) (*GetTrafficDataByDetectionPointByLaneStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrafficDataByDetectionPointByLaneStatisticsResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointByLaneService_GetHistoryHourTrafficDataByDetectionPointByLaneStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointByLaneServiceClient) ListHistoryHourTrafficDataByDetectionPointByLaneDaily(ctx context.Context, in *ListTrafficDataByDetectionPointByLaneDailyRequest, opts ...grpc.CallOption) (*ListHistoryHourTrafficDataByDetectionPointByLaneDailyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHistoryHourTrafficDataByDetectionPointByLaneDailyResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointByLaneService_ListHistoryHourTrafficDataByDetectionPointByLaneDaily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionPointByLaneServiceClient) DownloadHistoryHourTrafficDataByDetectionPointByLane(ctx context.Context, in *DownloadTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionPointByLaneService_DownloadHistoryHourTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryHourTrafficDataByDetectionPointByLaneServiceServer is the server API for HistoryHourTrafficDataByDetectionPointByLaneService service.
// All implementations must embed UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer
// for forward compatibility.
type HistoryHourTrafficDataByDetectionPointByLaneServiceServer interface {
	ListHistoryHourTrafficDataByDetectionPointByLane(context.Context, *ListTrafficDataByDetectionPointByLaneRequest) (*ListHistoryHourTrafficDataByDetectionPointByLaneResponse, error)
	GetHistoryHourTrafficDataByDetectionPointByLane(context.Context, *GetTrafficDataByDetectionPointByLaneRequest) (*GetHistoryHourTrafficDataByDetectionPointByLaneResponse, error)
	CreateHistoryHourTrafficDataByDetectionPointByLane(context.Context, *CreateHistoryHourTrafficDataByDetectionPointByLaneRequest) (*CreateHistoryHourTrafficDataByDetectionPointByLaneResponse, error)
	UpdateHistoryHourTrafficDataByDetectionPointByLane(context.Context, *UpdateHistoryHourTrafficDataByDetectionPointByLaneRequest) (*UpdateHistoryHourTrafficDataByDetectionPointByLaneResponse, error)
	DeleteHistoryHourTrafficDataByDetectionPointByLane(context.Context, *DeleteTrafficDataByDetectionPointByLaneRequest) (*emptypb.Empty, error)
	BulkCreateHistoryHourTrafficDataByDetectionPointByLane(context.Context, *BulkCreateTrafficDataByDetectionPointByLaneRequest) (*BulkCreateTrafficDataByDetectionPointByLaneResponse, error)
	GetHistoryHourTrafficDataByDetectionPointByLaneStatistics(context.Context, *GetTrafficDataByDetectionPointByLaneStatisticsRequest) (*GetTrafficDataByDetectionPointByLaneStatisticsResponse, error)
	ListHistoryHourTrafficDataByDetectionPointByLaneDaily(context.Context, *ListTrafficDataByDetectionPointByLaneDailyRequest) (*ListHistoryHourTrafficDataByDetectionPointByLaneDailyResponse, error)
	DownloadHistoryHourTrafficDataByDetectionPointByLane(context.Context, *DownloadTrafficDataByDetectionPointByLaneRequest) (*DownloadResponse, error)
	mustEmbedUnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer()
}

// UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer struct{}

func (UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer) ListHistoryHourTrafficDataByDetectionPointByLane(context.Context, *ListTrafficDataByDetectionPointByLaneRequest) (*ListHistoryHourTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryHourTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer) GetHistoryHourTrafficDataByDetectionPointByLane(context.Context, *GetTrafficDataByDetectionPointByLaneRequest) (*GetHistoryHourTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryHourTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer) CreateHistoryHourTrafficDataByDetectionPointByLane(context.Context, *CreateHistoryHourTrafficDataByDetectionPointByLaneRequest) (*CreateHistoryHourTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHistoryHourTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer) UpdateHistoryHourTrafficDataByDetectionPointByLane(context.Context, *UpdateHistoryHourTrafficDataByDetectionPointByLaneRequest) (*UpdateHistoryHourTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHistoryHourTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer) DeleteHistoryHourTrafficDataByDetectionPointByLane(context.Context, *DeleteTrafficDataByDetectionPointByLaneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistoryHourTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer) BulkCreateHistoryHourTrafficDataByDetectionPointByLane(context.Context, *BulkCreateTrafficDataByDetectionPointByLaneRequest) (*BulkCreateTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateHistoryHourTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer) GetHistoryHourTrafficDataByDetectionPointByLaneStatistics(context.Context, *GetTrafficDataByDetectionPointByLaneStatisticsRequest) (*GetTrafficDataByDetectionPointByLaneStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryHourTrafficDataByDetectionPointByLaneStatistics not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer) ListHistoryHourTrafficDataByDetectionPointByLaneDaily(context.Context, *ListTrafficDataByDetectionPointByLaneDailyRequest) (*ListHistoryHourTrafficDataByDetectionPointByLaneDailyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryHourTrafficDataByDetectionPointByLaneDaily not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer) DownloadHistoryHourTrafficDataByDetectionPointByLane(context.Context, *DownloadTrafficDataByDetectionPointByLaneRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadHistoryHourTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer) mustEmbedUnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer() {
}
func (UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer) testEmbeddedByValue() {}

// UnsafeHistoryHourTrafficDataByDetectionPointByLaneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryHourTrafficDataByDetectionPointByLaneServiceServer will
// result in compilation errors.
type UnsafeHistoryHourTrafficDataByDetectionPointByLaneServiceServer interface {
	mustEmbedUnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer()
}

func RegisterHistoryHourTrafficDataByDetectionPointByLaneServiceServer(s grpc.ServiceRegistrar, srv HistoryHourTrafficDataByDetectionPointByLaneServiceServer) {
	// If the following call pancis, it indicates UnimplementedHistoryHourTrafficDataByDetectionPointByLaneServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HistoryHourTrafficDataByDetectionPointByLaneService_ServiceDesc, srv)
}

func _HistoryHourTrafficDataByDetectionPointByLaneService_ListHistoryHourTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).ListHistoryHourTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointByLaneService_ListHistoryHourTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).ListHistoryHourTrafficDataByDetectionPointByLane(ctx, req.(*ListTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointByLaneService_GetHistoryHourTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).GetHistoryHourTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointByLaneService_GetHistoryHourTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).GetHistoryHourTrafficDataByDetectionPointByLane(ctx, req.(*GetTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointByLaneService_CreateHistoryHourTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHistoryHourTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).CreateHistoryHourTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointByLaneService_CreateHistoryHourTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).CreateHistoryHourTrafficDataByDetectionPointByLane(ctx, req.(*CreateHistoryHourTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointByLaneService_UpdateHistoryHourTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHistoryHourTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).UpdateHistoryHourTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointByLaneService_UpdateHistoryHourTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).UpdateHistoryHourTrafficDataByDetectionPointByLane(ctx, req.(*UpdateHistoryHourTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointByLaneService_DeleteHistoryHourTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).DeleteHistoryHourTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointByLaneService_DeleteHistoryHourTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).DeleteHistoryHourTrafficDataByDetectionPointByLane(ctx, req.(*DeleteTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointByLaneService_BulkCreateHistoryHourTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).BulkCreateHistoryHourTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointByLaneService_BulkCreateHistoryHourTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).BulkCreateHistoryHourTrafficDataByDetectionPointByLane(ctx, req.(*BulkCreateTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointByLaneService_GetHistoryHourTrafficDataByDetectionPointByLaneStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionPointByLaneStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).GetHistoryHourTrafficDataByDetectionPointByLaneStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointByLaneService_GetHistoryHourTrafficDataByDetectionPointByLaneStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).GetHistoryHourTrafficDataByDetectionPointByLaneStatistics(ctx, req.(*GetTrafficDataByDetectionPointByLaneStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointByLaneService_ListHistoryHourTrafficDataByDetectionPointByLaneDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionPointByLaneDailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).ListHistoryHourTrafficDataByDetectionPointByLaneDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointByLaneService_ListHistoryHourTrafficDataByDetectionPointByLaneDaily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).ListHistoryHourTrafficDataByDetectionPointByLaneDaily(ctx, req.(*ListTrafficDataByDetectionPointByLaneDailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionPointByLaneService_DownloadHistoryHourTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).DownloadHistoryHourTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionPointByLaneService_DownloadHistoryHourTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionPointByLaneServiceServer).DownloadHistoryHourTrafficDataByDetectionPointByLane(ctx, req.(*DownloadTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryHourTrafficDataByDetectionPointByLaneService_ServiceDesc is the grpc.ServiceDesc for HistoryHourTrafficDataByDetectionPointByLaneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryHourTrafficDataByDetectionPointByLaneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HistoryHourTrafficDataByDetectionPointByLaneService",
	HandlerType: (*HistoryHourTrafficDataByDetectionPointByLaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHistoryHourTrafficDataByDetectionPointByLane",
			Handler:    _HistoryHourTrafficDataByDetectionPointByLaneService_ListHistoryHourTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "GetHistoryHourTrafficDataByDetectionPointByLane",
			Handler:    _HistoryHourTrafficDataByDetectionPointByLaneService_GetHistoryHourTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "CreateHistoryHourTrafficDataByDetectionPointByLane",
			Handler:    _HistoryHourTrafficDataByDetectionPointByLaneService_CreateHistoryHourTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "UpdateHistoryHourTrafficDataByDetectionPointByLane",
			Handler:    _HistoryHourTrafficDataByDetectionPointByLaneService_UpdateHistoryHourTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "DeleteHistoryHourTrafficDataByDetectionPointByLane",
			Handler:    _HistoryHourTrafficDataByDetectionPointByLaneService_DeleteHistoryHourTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "BulkCreateHistoryHourTrafficDataByDetectionPointByLane",
			Handler:    _HistoryHourTrafficDataByDetectionPointByLaneService_BulkCreateHistoryHourTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "GetHistoryHourTrafficDataByDetectionPointByLaneStatistics",
			Handler:    _HistoryHourTrafficDataByDetectionPointByLaneService_GetHistoryHourTrafficDataByDetectionPointByLaneStatistics_Handler,
		},
		{
			MethodName: "ListHistoryHourTrafficDataByDetectionPointByLaneDaily",
			Handler:    _HistoryHourTrafficDataByDetectionPointByLaneService_ListHistoryHourTrafficDataByDetectionPointByLaneDaily_Handler,
		},
		{
			MethodName: "DownloadHistoryHourTrafficDataByDetectionPointByLane",
			Handler:    _HistoryHourTrafficDataByDetectionPointByLaneService_DownloadHistoryHourTrafficDataByDetectionPointByLane_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/history_hour_traffic_data_detection_point_lane.service.proto",
}
