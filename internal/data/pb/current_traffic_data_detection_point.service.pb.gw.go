// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: services/current_traffic_data_detection_point.service.proto

/*
Package pb is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package pb

import (
	"context"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join

var (
	filter_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListCurrentTrafficDataByDetectionPoints(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListCurrentTrafficDataByDetectionPoints(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetCurrentTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetCurrentTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

func request_CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateCurrentTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateCurrentTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateCurrentTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateCurrentTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

func request_CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateCurrentTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateCurrentTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateCurrentTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateCurrentTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DeleteCurrentTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DeleteCurrentTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

func request_CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BulkCreateTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.BulkCreateCurrentTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BulkCreateTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.BulkCreateCurrentTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointStatisticsRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetCurrentTrafficDataByDetectionPointStatistics(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionPointStatisticsRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetCurrentTrafficDataByDetectionPointStatistics(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointDailyRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListCurrentTrafficDataByDetectionPointDaily(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionPointDailyRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListCurrentTrafficDataByDetectionPointDaily(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionPointServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DownloadTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DownloadCurrentTrafficDataByDetectionPoint(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionPointServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DownloadTrafficDataByDetectionPointRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DownloadCurrentTrafficDataByDetectionPoint(ctx, &protoReq)
	return msg, metadata, err

}

// RegisterCurrentTrafficDataByDetectionPointServiceHandlerServer registers the http handlers for service CurrentTrafficDataByDetectionPointService to "mux".
// UnaryRPC     :call CurrentTrafficDataByDetectionPointServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterCurrentTrafficDataByDetectionPointServiceHandlerFromEndpoint instead.
func RegisterCurrentTrafficDataByDetectionPointServiceHandlerServer(ctx context.Context, mux *runtime.ServeMux, server CurrentTrafficDataByDetectionPointServiceServer) error {

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/ListCurrentTrafficDataByDetectionPoints", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/GetCurrentTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/single"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/CreateCurrentTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/UpdateCurrentTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/DeleteCurrentTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/BulkCreateCurrentTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/bulk"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/GetCurrentTrafficDataByDetectionPointStatistics", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/statistics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/ListCurrentTrafficDataByDetectionPointDaily", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/daily"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/DownloadCurrentTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/download"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterCurrentTrafficDataByDetectionPointServiceHandlerFromEndpoint is same as RegisterCurrentTrafficDataByDetectionPointServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterCurrentTrafficDataByDetectionPointServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterCurrentTrafficDataByDetectionPointServiceHandler(ctx, mux, conn)
}

// RegisterCurrentTrafficDataByDetectionPointServiceHandler registers the http handlers for service CurrentTrafficDataByDetectionPointService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterCurrentTrafficDataByDetectionPointServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterCurrentTrafficDataByDetectionPointServiceHandlerClient(ctx, mux, NewCurrentTrafficDataByDetectionPointServiceClient(conn))
}

// RegisterCurrentTrafficDataByDetectionPointServiceHandlerClient registers the http handlers for service CurrentTrafficDataByDetectionPointService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "CurrentTrafficDataByDetectionPointServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "CurrentTrafficDataByDetectionPointServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "CurrentTrafficDataByDetectionPointServiceClient" to call the correct interceptors.
func RegisterCurrentTrafficDataByDetectionPointServiceHandlerClient(ctx context.Context, mux *runtime.ServeMux, client CurrentTrafficDataByDetectionPointServiceClient) error {

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/ListCurrentTrafficDataByDetectionPoints", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/GetCurrentTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/single"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/CreateCurrentTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/UpdateCurrentTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/DeleteCurrentTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/BulkCreateCurrentTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/bulk"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/GetCurrentTrafficDataByDetectionPointStatistics", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/statistics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/ListCurrentTrafficDataByDetectionPointDaily", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/daily"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionPointService/DownloadCurrentTrafficDataByDetectionPoint", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_point/download"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_point", "list"}, ""))

	pattern_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_point", "single"}, ""))

	pattern_CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4}, []string{"api", "v1", "traffic", "current", "detection_point"}, ""))

	pattern_CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4}, []string{"api", "v1", "traffic", "current", "detection_point"}, ""))

	pattern_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4}, []string{"api", "v1", "traffic", "current", "detection_point"}, ""))

	pattern_CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_point", "bulk"}, ""))

	pattern_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_point", "statistics"}, ""))

	pattern_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_point", "daily"}, ""))

	pattern_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_point", "download"}, ""))
)

var (
	forward_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_0 = runtime.ForwardResponseMessage
)
