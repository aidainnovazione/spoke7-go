// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: services/history_day_traffic_data_detection_point_lane.service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HistoryDayTrafficDataByDetectionPointByLaneService_ListHistoryDayTrafficDataByDetectionPointByLane_FullMethodName          = "/pb.HistoryDayTrafficDataByDetectionPointByLaneService/ListHistoryDayTrafficDataByDetectionPointByLane"
	HistoryDayTrafficDataByDetectionPointByLaneService_GetHistoryDayTrafficDataByDetectionPointByLane_FullMethodName           = "/pb.HistoryDayTrafficDataByDetectionPointByLaneService/GetHistoryDayTrafficDataByDetectionPointByLane"
	HistoryDayTrafficDataByDetectionPointByLaneService_CreateHistoryDayTrafficDataByDetectionPointByLane_FullMethodName        = "/pb.HistoryDayTrafficDataByDetectionPointByLaneService/CreateHistoryDayTrafficDataByDetectionPointByLane"
	HistoryDayTrafficDataByDetectionPointByLaneService_UpdateHistoryDayTrafficDataByDetectionPointByLane_FullMethodName        = "/pb.HistoryDayTrafficDataByDetectionPointByLaneService/UpdateHistoryDayTrafficDataByDetectionPointByLane"
	HistoryDayTrafficDataByDetectionPointByLaneService_DeleteHistoryDayTrafficDataByDetectionPointByLane_FullMethodName        = "/pb.HistoryDayTrafficDataByDetectionPointByLaneService/DeleteHistoryDayTrafficDataByDetectionPointByLane"
	HistoryDayTrafficDataByDetectionPointByLaneService_BulkCreateHistoryDayTrafficDataByDetectionPointByLane_FullMethodName    = "/pb.HistoryDayTrafficDataByDetectionPointByLaneService/BulkCreateHistoryDayTrafficDataByDetectionPointByLane"
	HistoryDayTrafficDataByDetectionPointByLaneService_GetHistoryDayTrafficDataByDetectionPointByLaneStatistics_FullMethodName = "/pb.HistoryDayTrafficDataByDetectionPointByLaneService/GetHistoryDayTrafficDataByDetectionPointByLaneStatistics"
	HistoryDayTrafficDataByDetectionPointByLaneService_ListHistoryDayTrafficDataByDetectionPointByLaneDaily_FullMethodName     = "/pb.HistoryDayTrafficDataByDetectionPointByLaneService/ListHistoryDayTrafficDataByDetectionPointByLaneDaily"
	HistoryDayTrafficDataByDetectionPointByLaneService_DownloadHistoryDayTrafficDataByDetectionPointByLane_FullMethodName      = "/pb.HistoryDayTrafficDataByDetectionPointByLaneService/DownloadHistoryDayTrafficDataByDetectionPointByLane"
)

// HistoryDayTrafficDataByDetectionPointByLaneServiceClient is the client API for HistoryDayTrafficDataByDetectionPointByLaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryDayTrafficDataByDetectionPointByLaneServiceClient interface {
	ListHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *ListTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*ListHistoryDayTrafficDataByDetectionPointByLaneResponse, error)
	GetHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *GetTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*GetHistoryDayTrafficDataByDetectionPointByLaneResponse, error)
	CreateHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *CreateHistoryDayTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*CreateHistoryDayTrafficDataByDetectionPointByLaneResponse, error)
	UpdateHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *UpdateHistoryDayTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*UpdateHistoryDayTrafficDataByDetectionPointByLaneResponse, error)
	DeleteHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *DeleteTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkCreateHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *BulkCreateTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionPointByLaneResponse, error)
	GetHistoryDayTrafficDataByDetectionPointByLaneStatistics(ctx context.Context, in *GetTrafficDataByDetectionPointByLaneStatisticsRequest, opts ...grpc.CallOption) (*GetTrafficDataByDetectionPointByLaneStatisticsResponse, error)
	ListHistoryDayTrafficDataByDetectionPointByLaneDaily(ctx context.Context, in *ListTrafficDataByDetectionPointByLaneDailyRequest, opts ...grpc.CallOption) (*ListHistoryDayTrafficDataByDetectionPointByLaneDailyResponse, error)
	DownloadHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *DownloadTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
}

type historyDayTrafficDataByDetectionPointByLaneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryDayTrafficDataByDetectionPointByLaneServiceClient(cc grpc.ClientConnInterface) HistoryDayTrafficDataByDetectionPointByLaneServiceClient {
	return &historyDayTrafficDataByDetectionPointByLaneServiceClient{cc}
}

func (c *historyDayTrafficDataByDetectionPointByLaneServiceClient) ListHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *ListTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*ListHistoryDayTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHistoryDayTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, HistoryDayTrafficDataByDetectionPointByLaneService_ListHistoryDayTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyDayTrafficDataByDetectionPointByLaneServiceClient) GetHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *GetTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*GetHistoryDayTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryDayTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, HistoryDayTrafficDataByDetectionPointByLaneService_GetHistoryDayTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyDayTrafficDataByDetectionPointByLaneServiceClient) CreateHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *CreateHistoryDayTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*CreateHistoryDayTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHistoryDayTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, HistoryDayTrafficDataByDetectionPointByLaneService_CreateHistoryDayTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyDayTrafficDataByDetectionPointByLaneServiceClient) UpdateHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *UpdateHistoryDayTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*UpdateHistoryDayTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHistoryDayTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, HistoryDayTrafficDataByDetectionPointByLaneService_UpdateHistoryDayTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyDayTrafficDataByDetectionPointByLaneServiceClient) DeleteHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *DeleteTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HistoryDayTrafficDataByDetectionPointByLaneService_DeleteHistoryDayTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyDayTrafficDataByDetectionPointByLaneServiceClient) BulkCreateHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *BulkCreateTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionPointByLaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateTrafficDataByDetectionPointByLaneResponse)
	err := c.cc.Invoke(ctx, HistoryDayTrafficDataByDetectionPointByLaneService_BulkCreateHistoryDayTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyDayTrafficDataByDetectionPointByLaneServiceClient) GetHistoryDayTrafficDataByDetectionPointByLaneStatistics(ctx context.Context, in *GetTrafficDataByDetectionPointByLaneStatisticsRequest, opts ...grpc.CallOption) (*GetTrafficDataByDetectionPointByLaneStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrafficDataByDetectionPointByLaneStatisticsResponse)
	err := c.cc.Invoke(ctx, HistoryDayTrafficDataByDetectionPointByLaneService_GetHistoryDayTrafficDataByDetectionPointByLaneStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyDayTrafficDataByDetectionPointByLaneServiceClient) ListHistoryDayTrafficDataByDetectionPointByLaneDaily(ctx context.Context, in *ListTrafficDataByDetectionPointByLaneDailyRequest, opts ...grpc.CallOption) (*ListHistoryDayTrafficDataByDetectionPointByLaneDailyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHistoryDayTrafficDataByDetectionPointByLaneDailyResponse)
	err := c.cc.Invoke(ctx, HistoryDayTrafficDataByDetectionPointByLaneService_ListHistoryDayTrafficDataByDetectionPointByLaneDaily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyDayTrafficDataByDetectionPointByLaneServiceClient) DownloadHistoryDayTrafficDataByDetectionPointByLane(ctx context.Context, in *DownloadTrafficDataByDetectionPointByLaneRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, HistoryDayTrafficDataByDetectionPointByLaneService_DownloadHistoryDayTrafficDataByDetectionPointByLane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryDayTrafficDataByDetectionPointByLaneServiceServer is the server API for HistoryDayTrafficDataByDetectionPointByLaneService service.
// All implementations must embed UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer
// for forward compatibility.
type HistoryDayTrafficDataByDetectionPointByLaneServiceServer interface {
	ListHistoryDayTrafficDataByDetectionPointByLane(context.Context, *ListTrafficDataByDetectionPointByLaneRequest) (*ListHistoryDayTrafficDataByDetectionPointByLaneResponse, error)
	GetHistoryDayTrafficDataByDetectionPointByLane(context.Context, *GetTrafficDataByDetectionPointByLaneRequest) (*GetHistoryDayTrafficDataByDetectionPointByLaneResponse, error)
	CreateHistoryDayTrafficDataByDetectionPointByLane(context.Context, *CreateHistoryDayTrafficDataByDetectionPointByLaneRequest) (*CreateHistoryDayTrafficDataByDetectionPointByLaneResponse, error)
	UpdateHistoryDayTrafficDataByDetectionPointByLane(context.Context, *UpdateHistoryDayTrafficDataByDetectionPointByLaneRequest) (*UpdateHistoryDayTrafficDataByDetectionPointByLaneResponse, error)
	DeleteHistoryDayTrafficDataByDetectionPointByLane(context.Context, *DeleteTrafficDataByDetectionPointByLaneRequest) (*emptypb.Empty, error)
	BulkCreateHistoryDayTrafficDataByDetectionPointByLane(context.Context, *BulkCreateTrafficDataByDetectionPointByLaneRequest) (*BulkCreateTrafficDataByDetectionPointByLaneResponse, error)
	GetHistoryDayTrafficDataByDetectionPointByLaneStatistics(context.Context, *GetTrafficDataByDetectionPointByLaneStatisticsRequest) (*GetTrafficDataByDetectionPointByLaneStatisticsResponse, error)
	ListHistoryDayTrafficDataByDetectionPointByLaneDaily(context.Context, *ListTrafficDataByDetectionPointByLaneDailyRequest) (*ListHistoryDayTrafficDataByDetectionPointByLaneDailyResponse, error)
	DownloadHistoryDayTrafficDataByDetectionPointByLane(context.Context, *DownloadTrafficDataByDetectionPointByLaneRequest) (*DownloadResponse, error)
	mustEmbedUnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer()
}

// UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer struct{}

func (UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer) ListHistoryDayTrafficDataByDetectionPointByLane(context.Context, *ListTrafficDataByDetectionPointByLaneRequest) (*ListHistoryDayTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryDayTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer) GetHistoryDayTrafficDataByDetectionPointByLane(context.Context, *GetTrafficDataByDetectionPointByLaneRequest) (*GetHistoryDayTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryDayTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer) CreateHistoryDayTrafficDataByDetectionPointByLane(context.Context, *CreateHistoryDayTrafficDataByDetectionPointByLaneRequest) (*CreateHistoryDayTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHistoryDayTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer) UpdateHistoryDayTrafficDataByDetectionPointByLane(context.Context, *UpdateHistoryDayTrafficDataByDetectionPointByLaneRequest) (*UpdateHistoryDayTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHistoryDayTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer) DeleteHistoryDayTrafficDataByDetectionPointByLane(context.Context, *DeleteTrafficDataByDetectionPointByLaneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistoryDayTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer) BulkCreateHistoryDayTrafficDataByDetectionPointByLane(context.Context, *BulkCreateTrafficDataByDetectionPointByLaneRequest) (*BulkCreateTrafficDataByDetectionPointByLaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateHistoryDayTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer) GetHistoryDayTrafficDataByDetectionPointByLaneStatistics(context.Context, *GetTrafficDataByDetectionPointByLaneStatisticsRequest) (*GetTrafficDataByDetectionPointByLaneStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryDayTrafficDataByDetectionPointByLaneStatistics not implemented")
}
func (UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer) ListHistoryDayTrafficDataByDetectionPointByLaneDaily(context.Context, *ListTrafficDataByDetectionPointByLaneDailyRequest) (*ListHistoryDayTrafficDataByDetectionPointByLaneDailyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryDayTrafficDataByDetectionPointByLaneDaily not implemented")
}
func (UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer) DownloadHistoryDayTrafficDataByDetectionPointByLane(context.Context, *DownloadTrafficDataByDetectionPointByLaneRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadHistoryDayTrafficDataByDetectionPointByLane not implemented")
}
func (UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer) mustEmbedUnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer() {
}
func (UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer) testEmbeddedByValue() {}

// UnsafeHistoryDayTrafficDataByDetectionPointByLaneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryDayTrafficDataByDetectionPointByLaneServiceServer will
// result in compilation errors.
type UnsafeHistoryDayTrafficDataByDetectionPointByLaneServiceServer interface {
	mustEmbedUnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer()
}

func RegisterHistoryDayTrafficDataByDetectionPointByLaneServiceServer(s grpc.ServiceRegistrar, srv HistoryDayTrafficDataByDetectionPointByLaneServiceServer) {
	// If the following call pancis, it indicates UnimplementedHistoryDayTrafficDataByDetectionPointByLaneServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HistoryDayTrafficDataByDetectionPointByLaneService_ServiceDesc, srv)
}

func _HistoryDayTrafficDataByDetectionPointByLaneService_ListHistoryDayTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).ListHistoryDayTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryDayTrafficDataByDetectionPointByLaneService_ListHistoryDayTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).ListHistoryDayTrafficDataByDetectionPointByLane(ctx, req.(*ListTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryDayTrafficDataByDetectionPointByLaneService_GetHistoryDayTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).GetHistoryDayTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryDayTrafficDataByDetectionPointByLaneService_GetHistoryDayTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).GetHistoryDayTrafficDataByDetectionPointByLane(ctx, req.(*GetTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryDayTrafficDataByDetectionPointByLaneService_CreateHistoryDayTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHistoryDayTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).CreateHistoryDayTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryDayTrafficDataByDetectionPointByLaneService_CreateHistoryDayTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).CreateHistoryDayTrafficDataByDetectionPointByLane(ctx, req.(*CreateHistoryDayTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryDayTrafficDataByDetectionPointByLaneService_UpdateHistoryDayTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHistoryDayTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).UpdateHistoryDayTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryDayTrafficDataByDetectionPointByLaneService_UpdateHistoryDayTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).UpdateHistoryDayTrafficDataByDetectionPointByLane(ctx, req.(*UpdateHistoryDayTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryDayTrafficDataByDetectionPointByLaneService_DeleteHistoryDayTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).DeleteHistoryDayTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryDayTrafficDataByDetectionPointByLaneService_DeleteHistoryDayTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).DeleteHistoryDayTrafficDataByDetectionPointByLane(ctx, req.(*DeleteTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryDayTrafficDataByDetectionPointByLaneService_BulkCreateHistoryDayTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).BulkCreateHistoryDayTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryDayTrafficDataByDetectionPointByLaneService_BulkCreateHistoryDayTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).BulkCreateHistoryDayTrafficDataByDetectionPointByLane(ctx, req.(*BulkCreateTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryDayTrafficDataByDetectionPointByLaneService_GetHistoryDayTrafficDataByDetectionPointByLaneStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionPointByLaneStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).GetHistoryDayTrafficDataByDetectionPointByLaneStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryDayTrafficDataByDetectionPointByLaneService_GetHistoryDayTrafficDataByDetectionPointByLaneStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).GetHistoryDayTrafficDataByDetectionPointByLaneStatistics(ctx, req.(*GetTrafficDataByDetectionPointByLaneStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryDayTrafficDataByDetectionPointByLaneService_ListHistoryDayTrafficDataByDetectionPointByLaneDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionPointByLaneDailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).ListHistoryDayTrafficDataByDetectionPointByLaneDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryDayTrafficDataByDetectionPointByLaneService_ListHistoryDayTrafficDataByDetectionPointByLaneDaily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).ListHistoryDayTrafficDataByDetectionPointByLaneDaily(ctx, req.(*ListTrafficDataByDetectionPointByLaneDailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryDayTrafficDataByDetectionPointByLaneService_DownloadHistoryDayTrafficDataByDetectionPointByLane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTrafficDataByDetectionPointByLaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).DownloadHistoryDayTrafficDataByDetectionPointByLane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryDayTrafficDataByDetectionPointByLaneService_DownloadHistoryDayTrafficDataByDetectionPointByLane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryDayTrafficDataByDetectionPointByLaneServiceServer).DownloadHistoryDayTrafficDataByDetectionPointByLane(ctx, req.(*DownloadTrafficDataByDetectionPointByLaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryDayTrafficDataByDetectionPointByLaneService_ServiceDesc is the grpc.ServiceDesc for HistoryDayTrafficDataByDetectionPointByLaneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryDayTrafficDataByDetectionPointByLaneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HistoryDayTrafficDataByDetectionPointByLaneService",
	HandlerType: (*HistoryDayTrafficDataByDetectionPointByLaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHistoryDayTrafficDataByDetectionPointByLane",
			Handler:    _HistoryDayTrafficDataByDetectionPointByLaneService_ListHistoryDayTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "GetHistoryDayTrafficDataByDetectionPointByLane",
			Handler:    _HistoryDayTrafficDataByDetectionPointByLaneService_GetHistoryDayTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "CreateHistoryDayTrafficDataByDetectionPointByLane",
			Handler:    _HistoryDayTrafficDataByDetectionPointByLaneService_CreateHistoryDayTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "UpdateHistoryDayTrafficDataByDetectionPointByLane",
			Handler:    _HistoryDayTrafficDataByDetectionPointByLaneService_UpdateHistoryDayTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "DeleteHistoryDayTrafficDataByDetectionPointByLane",
			Handler:    _HistoryDayTrafficDataByDetectionPointByLaneService_DeleteHistoryDayTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "BulkCreateHistoryDayTrafficDataByDetectionPointByLane",
			Handler:    _HistoryDayTrafficDataByDetectionPointByLaneService_BulkCreateHistoryDayTrafficDataByDetectionPointByLane_Handler,
		},
		{
			MethodName: "GetHistoryDayTrafficDataByDetectionPointByLaneStatistics",
			Handler:    _HistoryDayTrafficDataByDetectionPointByLaneService_GetHistoryDayTrafficDataByDetectionPointByLaneStatistics_Handler,
		},
		{
			MethodName: "ListHistoryDayTrafficDataByDetectionPointByLaneDaily",
			Handler:    _HistoryDayTrafficDataByDetectionPointByLaneService_ListHistoryDayTrafficDataByDetectionPointByLaneDaily_Handler,
		},
		{
			MethodName: "DownloadHistoryDayTrafficDataByDetectionPointByLane",
			Handler:    _HistoryDayTrafficDataByDetectionPointByLaneService_DownloadHistoryDayTrafficDataByDetectionPointByLane_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/history_day_traffic_data_detection_point_lane.service.proto",
}
