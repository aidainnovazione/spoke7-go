// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: services/history_hour_traffic_data_detection_section.service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_FullMethodName          = "/pb.HistoryHourTrafficDataByDetectionSectionService/ListHistoryHourTrafficDataByDetectionSection"
	HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_FullMethodName           = "/pb.HistoryHourTrafficDataByDetectionSectionService/GetHistoryHourTrafficDataByDetectionSection"
	HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_FullMethodName        = "/pb.HistoryHourTrafficDataByDetectionSectionService/CreateHistoryHourTrafficDataByDetectionSection"
	HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_FullMethodName        = "/pb.HistoryHourTrafficDataByDetectionSectionService/UpdateHistoryHourTrafficDataByDetectionSection"
	HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_FullMethodName        = "/pb.HistoryHourTrafficDataByDetectionSectionService/DeleteHistoryHourTrafficDataByDetectionSection"
	HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_FullMethodName    = "/pb.HistoryHourTrafficDataByDetectionSectionService/BulkCreateHistoryHourTrafficDataByDetectionSection"
	HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_FullMethodName = "/pb.HistoryHourTrafficDataByDetectionSectionService/GetHistoryHourTrafficDataByDetectionSectionStatistics"
	HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_FullMethodName     = "/pb.HistoryHourTrafficDataByDetectionSectionService/ListHistoryHourTrafficDataByDetectionSectionDaily"
	HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_FullMethodName      = "/pb.HistoryHourTrafficDataByDetectionSectionService/DownloadHistoryHourTrafficDataByDetectionSection"
)

// HistoryHourTrafficDataByDetectionSectionServiceClient is the client API for HistoryHourTrafficDataByDetectionSectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryHourTrafficDataByDetectionSectionServiceClient interface {
	ListHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *ListTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*ListHistoryHourTrafficDataByDetectionSectionResponse, error)
	GetHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *GetTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*GetHistoryHourTrafficDataByDetectionSectionResponse, error)
	CreateHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *CreateHistoryHourTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*CreateHistoryHourTrafficDataByDetectionSectionResponse, error)
	UpdateHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *UpdateHistoryHourTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*UpdateHistoryHourTrafficDataByDetectionSectionResponse, error)
	DeleteHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *DeleteTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkCreateHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *BulkCreateTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionSectionResponse, error)
	GetHistoryHourTrafficDataByDetectionSectionStatistics(ctx context.Context, in *GetTrafficDataByDetectionSectionStatisticsRequest, opts ...grpc.CallOption) (*GetTrafficDataByDetectionSectionStatisticsResponse, error)
	ListHistoryHourTrafficDataByDetectionSectionDaily(ctx context.Context, in *ListTrafficDataByDetectionSectionDailyRequest, opts ...grpc.CallOption) (*ListHistoryHourTrafficDataByDetectionSectionDailyResponse, error)
	DownloadHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *DownloadTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
}

type historyHourTrafficDataByDetectionSectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryHourTrafficDataByDetectionSectionServiceClient(cc grpc.ClientConnInterface) HistoryHourTrafficDataByDetectionSectionServiceClient {
	return &historyHourTrafficDataByDetectionSectionServiceClient{cc}
}

func (c *historyHourTrafficDataByDetectionSectionServiceClient) ListHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *ListTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*ListHistoryHourTrafficDataByDetectionSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHistoryHourTrafficDataByDetectionSectionResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionSectionServiceClient) GetHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *GetTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*GetHistoryHourTrafficDataByDetectionSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryHourTrafficDataByDetectionSectionResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionSectionServiceClient) CreateHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *CreateHistoryHourTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*CreateHistoryHourTrafficDataByDetectionSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHistoryHourTrafficDataByDetectionSectionResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionSectionServiceClient) UpdateHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *UpdateHistoryHourTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*UpdateHistoryHourTrafficDataByDetectionSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHistoryHourTrafficDataByDetectionSectionResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionSectionServiceClient) DeleteHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *DeleteTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionSectionServiceClient) BulkCreateHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *BulkCreateTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionSectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateTrafficDataByDetectionSectionResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionSectionServiceClient) GetHistoryHourTrafficDataByDetectionSectionStatistics(ctx context.Context, in *GetTrafficDataByDetectionSectionStatisticsRequest, opts ...grpc.CallOption) (*GetTrafficDataByDetectionSectionStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrafficDataByDetectionSectionStatisticsResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionSectionServiceClient) ListHistoryHourTrafficDataByDetectionSectionDaily(ctx context.Context, in *ListTrafficDataByDetectionSectionDailyRequest, opts ...grpc.CallOption) (*ListHistoryHourTrafficDataByDetectionSectionDailyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHistoryHourTrafficDataByDetectionSectionDailyResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyHourTrafficDataByDetectionSectionServiceClient) DownloadHistoryHourTrafficDataByDetectionSection(ctx context.Context, in *DownloadTrafficDataByDetectionSectionRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryHourTrafficDataByDetectionSectionServiceServer is the server API for HistoryHourTrafficDataByDetectionSectionService service.
// All implementations must embed UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer
// for forward compatibility.
type HistoryHourTrafficDataByDetectionSectionServiceServer interface {
	ListHistoryHourTrafficDataByDetectionSection(context.Context, *ListTrafficDataByDetectionSectionRequest) (*ListHistoryHourTrafficDataByDetectionSectionResponse, error)
	GetHistoryHourTrafficDataByDetectionSection(context.Context, *GetTrafficDataByDetectionSectionRequest) (*GetHistoryHourTrafficDataByDetectionSectionResponse, error)
	CreateHistoryHourTrafficDataByDetectionSection(context.Context, *CreateHistoryHourTrafficDataByDetectionSectionRequest) (*CreateHistoryHourTrafficDataByDetectionSectionResponse, error)
	UpdateHistoryHourTrafficDataByDetectionSection(context.Context, *UpdateHistoryHourTrafficDataByDetectionSectionRequest) (*UpdateHistoryHourTrafficDataByDetectionSectionResponse, error)
	DeleteHistoryHourTrafficDataByDetectionSection(context.Context, *DeleteTrafficDataByDetectionSectionRequest) (*emptypb.Empty, error)
	BulkCreateHistoryHourTrafficDataByDetectionSection(context.Context, *BulkCreateTrafficDataByDetectionSectionRequest) (*BulkCreateTrafficDataByDetectionSectionResponse, error)
	GetHistoryHourTrafficDataByDetectionSectionStatistics(context.Context, *GetTrafficDataByDetectionSectionStatisticsRequest) (*GetTrafficDataByDetectionSectionStatisticsResponse, error)
	ListHistoryHourTrafficDataByDetectionSectionDaily(context.Context, *ListTrafficDataByDetectionSectionDailyRequest) (*ListHistoryHourTrafficDataByDetectionSectionDailyResponse, error)
	DownloadHistoryHourTrafficDataByDetectionSection(context.Context, *DownloadTrafficDataByDetectionSectionRequest) (*DownloadResponse, error)
	mustEmbedUnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer()
}

// UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer struct{}

func (UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer) ListHistoryHourTrafficDataByDetectionSection(context.Context, *ListTrafficDataByDetectionSectionRequest) (*ListHistoryHourTrafficDataByDetectionSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryHourTrafficDataByDetectionSection not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer) GetHistoryHourTrafficDataByDetectionSection(context.Context, *GetTrafficDataByDetectionSectionRequest) (*GetHistoryHourTrafficDataByDetectionSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryHourTrafficDataByDetectionSection not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer) CreateHistoryHourTrafficDataByDetectionSection(context.Context, *CreateHistoryHourTrafficDataByDetectionSectionRequest) (*CreateHistoryHourTrafficDataByDetectionSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHistoryHourTrafficDataByDetectionSection not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer) UpdateHistoryHourTrafficDataByDetectionSection(context.Context, *UpdateHistoryHourTrafficDataByDetectionSectionRequest) (*UpdateHistoryHourTrafficDataByDetectionSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHistoryHourTrafficDataByDetectionSection not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer) DeleteHistoryHourTrafficDataByDetectionSection(context.Context, *DeleteTrafficDataByDetectionSectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistoryHourTrafficDataByDetectionSection not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer) BulkCreateHistoryHourTrafficDataByDetectionSection(context.Context, *BulkCreateTrafficDataByDetectionSectionRequest) (*BulkCreateTrafficDataByDetectionSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateHistoryHourTrafficDataByDetectionSection not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer) GetHistoryHourTrafficDataByDetectionSectionStatistics(context.Context, *GetTrafficDataByDetectionSectionStatisticsRequest) (*GetTrafficDataByDetectionSectionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryHourTrafficDataByDetectionSectionStatistics not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer) ListHistoryHourTrafficDataByDetectionSectionDaily(context.Context, *ListTrafficDataByDetectionSectionDailyRequest) (*ListHistoryHourTrafficDataByDetectionSectionDailyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryHourTrafficDataByDetectionSectionDaily not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer) DownloadHistoryHourTrafficDataByDetectionSection(context.Context, *DownloadTrafficDataByDetectionSectionRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadHistoryHourTrafficDataByDetectionSection not implemented")
}
func (UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer) mustEmbedUnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer() {
}
func (UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer) testEmbeddedByValue() {}

// UnsafeHistoryHourTrafficDataByDetectionSectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryHourTrafficDataByDetectionSectionServiceServer will
// result in compilation errors.
type UnsafeHistoryHourTrafficDataByDetectionSectionServiceServer interface {
	mustEmbedUnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer()
}

func RegisterHistoryHourTrafficDataByDetectionSectionServiceServer(s grpc.ServiceRegistrar, srv HistoryHourTrafficDataByDetectionSectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedHistoryHourTrafficDataByDetectionSectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HistoryHourTrafficDataByDetectionSectionService_ServiceDesc, srv)
}

func _HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).ListHistoryHourTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).ListHistoryHourTrafficDataByDetectionSection(ctx, req.(*ListTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).GetHistoryHourTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).GetHistoryHourTrafficDataByDetectionSection(ctx, req.(*GetTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHistoryHourTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).CreateHistoryHourTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).CreateHistoryHourTrafficDataByDetectionSection(ctx, req.(*CreateHistoryHourTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHistoryHourTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).UpdateHistoryHourTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).UpdateHistoryHourTrafficDataByDetectionSection(ctx, req.(*UpdateHistoryHourTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).DeleteHistoryHourTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).DeleteHistoryHourTrafficDataByDetectionSection(ctx, req.(*DeleteTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).BulkCreateHistoryHourTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).BulkCreateHistoryHourTrafficDataByDetectionSection(ctx, req.(*BulkCreateTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionSectionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).GetHistoryHourTrafficDataByDetectionSectionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).GetHistoryHourTrafficDataByDetectionSectionStatistics(ctx, req.(*GetTrafficDataByDetectionSectionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionSectionDailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).ListHistoryHourTrafficDataByDetectionSectionDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).ListHistoryHourTrafficDataByDetectionSectionDaily(ctx, req.(*ListTrafficDataByDetectionSectionDailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTrafficDataByDetectionSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).DownloadHistoryHourTrafficDataByDetectionSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryHourTrafficDataByDetectionSectionServiceServer).DownloadHistoryHourTrafficDataByDetectionSection(ctx, req.(*DownloadTrafficDataByDetectionSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryHourTrafficDataByDetectionSectionService_ServiceDesc is the grpc.ServiceDesc for HistoryHourTrafficDataByDetectionSectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryHourTrafficDataByDetectionSectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HistoryHourTrafficDataByDetectionSectionService",
	HandlerType: (*HistoryHourTrafficDataByDetectionSectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHistoryHourTrafficDataByDetectionSection",
			Handler:    _HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSection_Handler,
		},
		{
			MethodName: "GetHistoryHourTrafficDataByDetectionSection",
			Handler:    _HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSection_Handler,
		},
		{
			MethodName: "CreateHistoryHourTrafficDataByDetectionSection",
			Handler:    _HistoryHourTrafficDataByDetectionSectionService_CreateHistoryHourTrafficDataByDetectionSection_Handler,
		},
		{
			MethodName: "UpdateHistoryHourTrafficDataByDetectionSection",
			Handler:    _HistoryHourTrafficDataByDetectionSectionService_UpdateHistoryHourTrafficDataByDetectionSection_Handler,
		},
		{
			MethodName: "DeleteHistoryHourTrafficDataByDetectionSection",
			Handler:    _HistoryHourTrafficDataByDetectionSectionService_DeleteHistoryHourTrafficDataByDetectionSection_Handler,
		},
		{
			MethodName: "BulkCreateHistoryHourTrafficDataByDetectionSection",
			Handler:    _HistoryHourTrafficDataByDetectionSectionService_BulkCreateHistoryHourTrafficDataByDetectionSection_Handler,
		},
		{
			MethodName: "GetHistoryHourTrafficDataByDetectionSectionStatistics",
			Handler:    _HistoryHourTrafficDataByDetectionSectionService_GetHistoryHourTrafficDataByDetectionSectionStatistics_Handler,
		},
		{
			MethodName: "ListHistoryHourTrafficDataByDetectionSectionDaily",
			Handler:    _HistoryHourTrafficDataByDetectionSectionService_ListHistoryHourTrafficDataByDetectionSectionDaily_Handler,
		},
		{
			MethodName: "DownloadHistoryHourTrafficDataByDetectionSection",
			Handler:    _HistoryHourTrafficDataByDetectionSectionService_DownloadHistoryHourTrafficDataByDetectionSection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/history_hour_traffic_data_detection_section.service.proto",
}
