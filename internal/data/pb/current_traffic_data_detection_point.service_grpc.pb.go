// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: services/current_traffic_data_detection_point.service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_FullMethodName         = "/pb.CurrentTrafficDataByDetectionPointService/ListCurrentTrafficDataByDetectionPoints"
	CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_FullMethodName           = "/pb.CurrentTrafficDataByDetectionPointService/GetCurrentTrafficDataByDetectionPoint"
	CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_FullMethodName        = "/pb.CurrentTrafficDataByDetectionPointService/CreateCurrentTrafficDataByDetectionPoint"
	CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_FullMethodName        = "/pb.CurrentTrafficDataByDetectionPointService/UpdateCurrentTrafficDataByDetectionPoint"
	CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_FullMethodName        = "/pb.CurrentTrafficDataByDetectionPointService/DeleteCurrentTrafficDataByDetectionPoint"
	CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_FullMethodName    = "/pb.CurrentTrafficDataByDetectionPointService/BulkCreateCurrentTrafficDataByDetectionPoint"
	CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_FullMethodName = "/pb.CurrentTrafficDataByDetectionPointService/GetCurrentTrafficDataByDetectionPointStatistics"
	CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_FullMethodName     = "/pb.CurrentTrafficDataByDetectionPointService/ListCurrentTrafficDataByDetectionPointDaily"
	CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_FullMethodName      = "/pb.CurrentTrafficDataByDetectionPointService/DownloadCurrentTrafficDataByDetectionPoint"
)

// CurrentTrafficDataByDetectionPointServiceClient is the client API for CurrentTrafficDataByDetectionPointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrentTrafficDataByDetectionPointServiceClient interface {
	ListCurrentTrafficDataByDetectionPoints(ctx context.Context, in *ListTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*ListCurrentTrafficDataByDetectionPointsResponse, error)
	GetCurrentTrafficDataByDetectionPoint(ctx context.Context, in *GetTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*GetCurrentTrafficDataByDetectionPointsResponse, error)
	CreateCurrentTrafficDataByDetectionPoint(ctx context.Context, in *CreateCurrentTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*CreateCurrentTrafficDataByDetectionPointResponse, error)
	UpdateCurrentTrafficDataByDetectionPoint(ctx context.Context, in *UpdateCurrentTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*UpdateCurrentTrafficDataByDetectionPointResponse, error)
	DeleteCurrentTrafficDataByDetectionPoint(ctx context.Context, in *DeleteTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkCreateCurrentTrafficDataByDetectionPoint(ctx context.Context, in *BulkCreateTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionPointResponse, error)
	GetCurrentTrafficDataByDetectionPointStatistics(ctx context.Context, in *GetTrafficDataByDetectionPointStatisticsRequest, opts ...grpc.CallOption) (*GetCurrentTrafficDataByDetectionPointStatisticsResponse, error)
	ListCurrentTrafficDataByDetectionPointDaily(ctx context.Context, in *ListTrafficDataByDetectionPointDailyRequest, opts ...grpc.CallOption) (*ListCurrentTrafficDataByDetectionPointDailyResponse, error)
	DownloadCurrentTrafficDataByDetectionPoint(ctx context.Context, in *DownloadTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
}

type currentTrafficDataByDetectionPointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrentTrafficDataByDetectionPointServiceClient(cc grpc.ClientConnInterface) CurrentTrafficDataByDetectionPointServiceClient {
	return &currentTrafficDataByDetectionPointServiceClient{cc}
}

func (c *currentTrafficDataByDetectionPointServiceClient) ListCurrentTrafficDataByDetectionPoints(ctx context.Context, in *ListTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*ListCurrentTrafficDataByDetectionPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCurrentTrafficDataByDetectionPointsResponse)
	err := c.cc.Invoke(ctx, CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentTrafficDataByDetectionPointServiceClient) GetCurrentTrafficDataByDetectionPoint(ctx context.Context, in *GetTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*GetCurrentTrafficDataByDetectionPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentTrafficDataByDetectionPointsResponse)
	err := c.cc.Invoke(ctx, CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentTrafficDataByDetectionPointServiceClient) CreateCurrentTrafficDataByDetectionPoint(ctx context.Context, in *CreateCurrentTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*CreateCurrentTrafficDataByDetectionPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCurrentTrafficDataByDetectionPointResponse)
	err := c.cc.Invoke(ctx, CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentTrafficDataByDetectionPointServiceClient) UpdateCurrentTrafficDataByDetectionPoint(ctx context.Context, in *UpdateCurrentTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*UpdateCurrentTrafficDataByDetectionPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCurrentTrafficDataByDetectionPointResponse)
	err := c.cc.Invoke(ctx, CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentTrafficDataByDetectionPointServiceClient) DeleteCurrentTrafficDataByDetectionPoint(ctx context.Context, in *DeleteTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentTrafficDataByDetectionPointServiceClient) BulkCreateCurrentTrafficDataByDetectionPoint(ctx context.Context, in *BulkCreateTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*BulkCreateTrafficDataByDetectionPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateTrafficDataByDetectionPointResponse)
	err := c.cc.Invoke(ctx, CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentTrafficDataByDetectionPointServiceClient) GetCurrentTrafficDataByDetectionPointStatistics(ctx context.Context, in *GetTrafficDataByDetectionPointStatisticsRequest, opts ...grpc.CallOption) (*GetCurrentTrafficDataByDetectionPointStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentTrafficDataByDetectionPointStatisticsResponse)
	err := c.cc.Invoke(ctx, CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentTrafficDataByDetectionPointServiceClient) ListCurrentTrafficDataByDetectionPointDaily(ctx context.Context, in *ListTrafficDataByDetectionPointDailyRequest, opts ...grpc.CallOption) (*ListCurrentTrafficDataByDetectionPointDailyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCurrentTrafficDataByDetectionPointDailyResponse)
	err := c.cc.Invoke(ctx, CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentTrafficDataByDetectionPointServiceClient) DownloadCurrentTrafficDataByDetectionPoint(ctx context.Context, in *DownloadTrafficDataByDetectionPointRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrentTrafficDataByDetectionPointServiceServer is the server API for CurrentTrafficDataByDetectionPointService service.
// All implementations must embed UnimplementedCurrentTrafficDataByDetectionPointServiceServer
// for forward compatibility.
type CurrentTrafficDataByDetectionPointServiceServer interface {
	ListCurrentTrafficDataByDetectionPoints(context.Context, *ListTrafficDataByDetectionPointRequest) (*ListCurrentTrafficDataByDetectionPointsResponse, error)
	GetCurrentTrafficDataByDetectionPoint(context.Context, *GetTrafficDataByDetectionPointRequest) (*GetCurrentTrafficDataByDetectionPointsResponse, error)
	CreateCurrentTrafficDataByDetectionPoint(context.Context, *CreateCurrentTrafficDataByDetectionPointRequest) (*CreateCurrentTrafficDataByDetectionPointResponse, error)
	UpdateCurrentTrafficDataByDetectionPoint(context.Context, *UpdateCurrentTrafficDataByDetectionPointRequest) (*UpdateCurrentTrafficDataByDetectionPointResponse, error)
	DeleteCurrentTrafficDataByDetectionPoint(context.Context, *DeleteTrafficDataByDetectionPointRequest) (*emptypb.Empty, error)
	BulkCreateCurrentTrafficDataByDetectionPoint(context.Context, *BulkCreateTrafficDataByDetectionPointRequest) (*BulkCreateTrafficDataByDetectionPointResponse, error)
	GetCurrentTrafficDataByDetectionPointStatistics(context.Context, *GetTrafficDataByDetectionPointStatisticsRequest) (*GetCurrentTrafficDataByDetectionPointStatisticsResponse, error)
	ListCurrentTrafficDataByDetectionPointDaily(context.Context, *ListTrafficDataByDetectionPointDailyRequest) (*ListCurrentTrafficDataByDetectionPointDailyResponse, error)
	DownloadCurrentTrafficDataByDetectionPoint(context.Context, *DownloadTrafficDataByDetectionPointRequest) (*DownloadResponse, error)
	mustEmbedUnimplementedCurrentTrafficDataByDetectionPointServiceServer()
}

// UnimplementedCurrentTrafficDataByDetectionPointServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCurrentTrafficDataByDetectionPointServiceServer struct{}

func (UnimplementedCurrentTrafficDataByDetectionPointServiceServer) ListCurrentTrafficDataByDetectionPoints(context.Context, *ListTrafficDataByDetectionPointRequest) (*ListCurrentTrafficDataByDetectionPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrentTrafficDataByDetectionPoints not implemented")
}
func (UnimplementedCurrentTrafficDataByDetectionPointServiceServer) GetCurrentTrafficDataByDetectionPoint(context.Context, *GetTrafficDataByDetectionPointRequest) (*GetCurrentTrafficDataByDetectionPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedCurrentTrafficDataByDetectionPointServiceServer) CreateCurrentTrafficDataByDetectionPoint(context.Context, *CreateCurrentTrafficDataByDetectionPointRequest) (*CreateCurrentTrafficDataByDetectionPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrentTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedCurrentTrafficDataByDetectionPointServiceServer) UpdateCurrentTrafficDataByDetectionPoint(context.Context, *UpdateCurrentTrafficDataByDetectionPointRequest) (*UpdateCurrentTrafficDataByDetectionPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrentTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedCurrentTrafficDataByDetectionPointServiceServer) DeleteCurrentTrafficDataByDetectionPoint(context.Context, *DeleteTrafficDataByDetectionPointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrentTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedCurrentTrafficDataByDetectionPointServiceServer) BulkCreateCurrentTrafficDataByDetectionPoint(context.Context, *BulkCreateTrafficDataByDetectionPointRequest) (*BulkCreateTrafficDataByDetectionPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateCurrentTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedCurrentTrafficDataByDetectionPointServiceServer) GetCurrentTrafficDataByDetectionPointStatistics(context.Context, *GetTrafficDataByDetectionPointStatisticsRequest) (*GetCurrentTrafficDataByDetectionPointStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTrafficDataByDetectionPointStatistics not implemented")
}
func (UnimplementedCurrentTrafficDataByDetectionPointServiceServer) ListCurrentTrafficDataByDetectionPointDaily(context.Context, *ListTrafficDataByDetectionPointDailyRequest) (*ListCurrentTrafficDataByDetectionPointDailyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrentTrafficDataByDetectionPointDaily not implemented")
}
func (UnimplementedCurrentTrafficDataByDetectionPointServiceServer) DownloadCurrentTrafficDataByDetectionPoint(context.Context, *DownloadTrafficDataByDetectionPointRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadCurrentTrafficDataByDetectionPoint not implemented")
}
func (UnimplementedCurrentTrafficDataByDetectionPointServiceServer) mustEmbedUnimplementedCurrentTrafficDataByDetectionPointServiceServer() {
}
func (UnimplementedCurrentTrafficDataByDetectionPointServiceServer) testEmbeddedByValue() {}

// UnsafeCurrentTrafficDataByDetectionPointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrentTrafficDataByDetectionPointServiceServer will
// result in compilation errors.
type UnsafeCurrentTrafficDataByDetectionPointServiceServer interface {
	mustEmbedUnimplementedCurrentTrafficDataByDetectionPointServiceServer()
}

func RegisterCurrentTrafficDataByDetectionPointServiceServer(s grpc.ServiceRegistrar, srv CurrentTrafficDataByDetectionPointServiceServer) {
	// If the following call pancis, it indicates UnimplementedCurrentTrafficDataByDetectionPointServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CurrentTrafficDataByDetectionPointService_ServiceDesc, srv)
}

func _CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).ListCurrentTrafficDataByDetectionPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).ListCurrentTrafficDataByDetectionPoints(ctx, req.(*ListTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).GetCurrentTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).GetCurrentTrafficDataByDetectionPoint(ctx, req.(*GetTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrentTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).CreateCurrentTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).CreateCurrentTrafficDataByDetectionPoint(ctx, req.(*CreateCurrentTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrentTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).UpdateCurrentTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).UpdateCurrentTrafficDataByDetectionPoint(ctx, req.(*UpdateCurrentTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).DeleteCurrentTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).DeleteCurrentTrafficDataByDetectionPoint(ctx, req.(*DeleteTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).BulkCreateCurrentTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).BulkCreateCurrentTrafficDataByDetectionPoint(ctx, req.(*BulkCreateTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficDataByDetectionPointStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).GetCurrentTrafficDataByDetectionPointStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).GetCurrentTrafficDataByDetectionPointStatistics(ctx, req.(*GetTrafficDataByDetectionPointStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficDataByDetectionPointDailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).ListCurrentTrafficDataByDetectionPointDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).ListCurrentTrafficDataByDetectionPointDaily(ctx, req.(*ListTrafficDataByDetectionPointDailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTrafficDataByDetectionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).DownloadCurrentTrafficDataByDetectionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrentTrafficDataByDetectionPointServiceServer).DownloadCurrentTrafficDataByDetectionPoint(ctx, req.(*DownloadTrafficDataByDetectionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrentTrafficDataByDetectionPointService_ServiceDesc is the grpc.ServiceDesc for CurrentTrafficDataByDetectionPointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrentTrafficDataByDetectionPointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CurrentTrafficDataByDetectionPointService",
	HandlerType: (*CurrentTrafficDataByDetectionPointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCurrentTrafficDataByDetectionPoints",
			Handler:    _CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPoints_Handler,
		},
		{
			MethodName: "GetCurrentTrafficDataByDetectionPoint",
			Handler:    _CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPoint_Handler,
		},
		{
			MethodName: "CreateCurrentTrafficDataByDetectionPoint",
			Handler:    _CurrentTrafficDataByDetectionPointService_CreateCurrentTrafficDataByDetectionPoint_Handler,
		},
		{
			MethodName: "UpdateCurrentTrafficDataByDetectionPoint",
			Handler:    _CurrentTrafficDataByDetectionPointService_UpdateCurrentTrafficDataByDetectionPoint_Handler,
		},
		{
			MethodName: "DeleteCurrentTrafficDataByDetectionPoint",
			Handler:    _CurrentTrafficDataByDetectionPointService_DeleteCurrentTrafficDataByDetectionPoint_Handler,
		},
		{
			MethodName: "BulkCreateCurrentTrafficDataByDetectionPoint",
			Handler:    _CurrentTrafficDataByDetectionPointService_BulkCreateCurrentTrafficDataByDetectionPoint_Handler,
		},
		{
			MethodName: "GetCurrentTrafficDataByDetectionPointStatistics",
			Handler:    _CurrentTrafficDataByDetectionPointService_GetCurrentTrafficDataByDetectionPointStatistics_Handler,
		},
		{
			MethodName: "ListCurrentTrafficDataByDetectionPointDaily",
			Handler:    _CurrentTrafficDataByDetectionPointService_ListCurrentTrafficDataByDetectionPointDaily_Handler,
		},
		{
			MethodName: "DownloadCurrentTrafficDataByDetectionPoint",
			Handler:    _CurrentTrafficDataByDetectionPointService_DownloadCurrentTrafficDataByDetectionPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/current_traffic_data_detection_point.service.proto",
}
