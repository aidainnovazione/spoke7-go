// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: services/current_traffic_data_detection_section.service.proto

/*
Package pb is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package pb

import (
	"context"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join

var (
	filter_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListCurrentTrafficDataByDetectionSections(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListCurrentTrafficDataByDetectionSections(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetCurrentTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetCurrentTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

func request_CurrentTrafficDataByDetectionSectionService_CreateCurrentTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateCurrentTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateCurrentTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionSectionService_CreateCurrentTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateCurrentTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateCurrentTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

func request_CurrentTrafficDataByDetectionSectionService_UpdateCurrentTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateCurrentTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateCurrentTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionSectionService_UpdateCurrentTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateCurrentTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateCurrentTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DeleteCurrentTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DeleteCurrentTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

func request_CurrentTrafficDataByDetectionSectionService_BulkCreateCurrentTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BulkCreateTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.BulkCreateCurrentTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionSectionService_BulkCreateCurrentTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BulkCreateTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.BulkCreateCurrentTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionSectionStatisticsRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetCurrentTrafficDataByDetectionSectionStatistics(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTrafficDataByDetectionSectionStatisticsRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetCurrentTrafficDataByDetectionSectionStatistics(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionSectionDailyRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListCurrentTrafficDataByDetectionSectionDaily(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListTrafficDataByDetectionSectionDailyRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListCurrentTrafficDataByDetectionSectionDaily(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, client CurrentTrafficDataByDetectionSectionServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DownloadTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DownloadCurrentTrafficDataByDetectionSection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0(ctx context.Context, marshaler runtime.Marshaler, server CurrentTrafficDataByDetectionSectionServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DownloadTrafficDataByDetectionSectionRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DownloadCurrentTrafficDataByDetectionSection(ctx, &protoReq)
	return msg, metadata, err

}

// RegisterCurrentTrafficDataByDetectionSectionServiceHandlerServer registers the http handlers for service CurrentTrafficDataByDetectionSectionService to "mux".
// UnaryRPC     :call CurrentTrafficDataByDetectionSectionServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterCurrentTrafficDataByDetectionSectionServiceHandlerFromEndpoint instead.
func RegisterCurrentTrafficDataByDetectionSectionServiceHandlerServer(ctx context.Context, mux *runtime.ServeMux, server CurrentTrafficDataByDetectionSectionServiceServer) error {

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/ListCurrentTrafficDataByDetectionSections", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section/list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/GetCurrentTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section/single"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CurrentTrafficDataByDetectionSectionService_CreateCurrentTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/CreateCurrentTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionSectionService_CreateCurrentTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_CreateCurrentTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_CurrentTrafficDataByDetectionSectionService_UpdateCurrentTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/UpdateCurrentTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionSectionService_UpdateCurrentTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_UpdateCurrentTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/DeleteCurrentTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CurrentTrafficDataByDetectionSectionService_BulkCreateCurrentTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/BulkCreateCurrentTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section/bulk"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionSectionService_BulkCreateCurrentTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_BulkCreateCurrentTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/GetCurrentTrafficDataByDetectionSectionStatistics", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section/statistics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/ListCurrentTrafficDataByDetectionSectionDaily", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section/daily"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/DownloadCurrentTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section/download"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterCurrentTrafficDataByDetectionSectionServiceHandlerFromEndpoint is same as RegisterCurrentTrafficDataByDetectionSectionServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterCurrentTrafficDataByDetectionSectionServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterCurrentTrafficDataByDetectionSectionServiceHandler(ctx, mux, conn)
}

// RegisterCurrentTrafficDataByDetectionSectionServiceHandler registers the http handlers for service CurrentTrafficDataByDetectionSectionService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterCurrentTrafficDataByDetectionSectionServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterCurrentTrafficDataByDetectionSectionServiceHandlerClient(ctx, mux, NewCurrentTrafficDataByDetectionSectionServiceClient(conn))
}

// RegisterCurrentTrafficDataByDetectionSectionServiceHandlerClient registers the http handlers for service CurrentTrafficDataByDetectionSectionService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "CurrentTrafficDataByDetectionSectionServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "CurrentTrafficDataByDetectionSectionServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "CurrentTrafficDataByDetectionSectionServiceClient" to call the correct interceptors.
func RegisterCurrentTrafficDataByDetectionSectionServiceHandlerClient(ctx context.Context, mux *runtime.ServeMux, client CurrentTrafficDataByDetectionSectionServiceClient) error {

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/ListCurrentTrafficDataByDetectionSections", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section/list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/GetCurrentTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section/single"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CurrentTrafficDataByDetectionSectionService_CreateCurrentTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/CreateCurrentTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionSectionService_CreateCurrentTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_CreateCurrentTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_CurrentTrafficDataByDetectionSectionService_UpdateCurrentTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/UpdateCurrentTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionSectionService_UpdateCurrentTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_UpdateCurrentTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/DeleteCurrentTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_CurrentTrafficDataByDetectionSectionService_BulkCreateCurrentTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/BulkCreateCurrentTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section/bulk"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionSectionService_BulkCreateCurrentTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_BulkCreateCurrentTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/GetCurrentTrafficDataByDetectionSectionStatistics", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section/statistics"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/ListCurrentTrafficDataByDetectionSectionDaily", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section/daily"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/pb.CurrentTrafficDataByDetectionSectionService/DownloadCurrentTrafficDataByDetectionSection", runtime.WithHTTPPathPattern("/api/v1/traffic/current/detection_section/download"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_section", "list"}, ""))

	pattern_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_section", "single"}, ""))

	pattern_CurrentTrafficDataByDetectionSectionService_CreateCurrentTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4}, []string{"api", "v1", "traffic", "current", "detection_section"}, ""))

	pattern_CurrentTrafficDataByDetectionSectionService_UpdateCurrentTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4}, []string{"api", "v1", "traffic", "current", "detection_section"}, ""))

	pattern_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4}, []string{"api", "v1", "traffic", "current", "detection_section"}, ""))

	pattern_CurrentTrafficDataByDetectionSectionService_BulkCreateCurrentTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_section", "bulk"}, ""))

	pattern_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_section", "statistics"}, ""))

	pattern_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_section", "daily"}, ""))

	pattern_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 2, 4, 2, 5}, []string{"api", "v1", "traffic", "current", "detection_section", "download"}, ""))
)

var (
	forward_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSections_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionSectionService_CreateCurrentTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionSectionService_UpdateCurrentTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionSectionService_DeleteCurrentTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionSectionService_BulkCreateCurrentTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionSectionService_GetCurrentTrafficDataByDetectionSectionStatistics_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionSectionService_ListCurrentTrafficDataByDetectionSectionDaily_0 = runtime.ForwardResponseMessage

	forward_CurrentTrafficDataByDetectionSectionService_DownloadCurrentTrafficDataByDetectionSection_0 = runtime.ForwardResponseMessage
)
